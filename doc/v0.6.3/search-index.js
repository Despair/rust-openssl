var searchIndex = {};
searchIndex['openssl'] = {"items":[[0,"","openssl","",null,null],[0,"asn1","","",null,null],[3,"Asn1Time","openssl::asn1","",null,null],[11,"new","","Wraps existing ASN1_TIME and takes ownership",0,null],[11,"days_from_now","","Creates a new time on specified interval in days from now",0,{"inputs":[{"name":"asn1time"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_handle","","Returns raw handle",0,null],[11,"drop","","",0,{"inputs":[{"name":"asn1time"}],"output":null}],[0,"bn","openssl","",null,null],[3,"BigNum","openssl::bn","",null,null],[4,"RNGProperty","","",null,null],[13,"MsbMaybeZero","","",1,null],[13,"MsbOne","","",1,null],[13,"TwoMsbOne","","",1,null],[0,"unchecked","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"bignum"}}],[11,"neg","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"bignum"}}],[11,"clone","","",1,{"inputs":[{"name":"rngproperty"}],"output":{"name":"rngproperty"}}],[11,"new","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"new_from","","",2,{"inputs":[{"name":"bignum"},{"name":"u64"}],"output":{"name":"result"}}],[11,"from_dec_str","","",2,{"inputs":[{"name":"bignum"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_hex_str","","",2,{"inputs":[{"name":"bignum"},{"name":"str"}],"output":{"name":"result"}}],[11,"new_from_slice","","",2,null],[11,"checked_sqr","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_nnmod","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_add","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_sub","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_mul","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_sqr","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_exp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_exp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_inv","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"add_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"sub_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"mul_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"div_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"mod_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"checked_gcd","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_generate_prime","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"is_prime","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"is_prime_fast","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"checked_new_random","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"},{"name":"rngproperty"},{"name":"bool"}],"output":{"name":"result"}}],[11,"checked_new_pseudo_random","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"},{"name":"rngproperty"},{"name":"bool"}],"output":{"name":"result"}}],[11,"checked_rand_in_range","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_pseudo_rand_in_range","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"set_bit","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"clear_bit","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"is_bit_set","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"mask_bits","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"checked_shl1","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_shr1","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_add","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_sub","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mul","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_div","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_shl","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"checked_shr","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"negate","","",2,{"inputs":[{"name":"bignum"}],"output":null}],[11,"abs_cmp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"ordering"}}],[11,"is_negative","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"bool"}}],[11,"num_bits","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"i32"}}],[11,"num_bytes","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"i32"}}],[11,"to_vec","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"vec"}}],[11,"to_dec_str","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"string"}}],[11,"to_hex_str","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"string"}}],[11,"fmt","","",2,{"inputs":[{"name":"bignum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"option"}}],[11,"drop","","",2,{"inputs":[{"name":"bignum"}],"output":null}],[0,"bio","openssl","",null,null],[3,"MemBio","openssl::bio","",null,null],[11,"drop","","",3,{"inputs":[{"name":"membio"}],"output":null}],[11,"new","","Creates a new owned memory based BIO",3,{"inputs":[{"name":"membio"}],"output":{"name":"result"}}],[11,"borrowed","","Returns a \"borrow\", i.e. it has no ownership",3,null],[11,"unwrap","","Consumes current bio and returns wrapped value\nNote that data ownership is lost and\nshould be managed manually",3,null],[11,"get_handle","","Temporarily gets wrapped value",3,null],[11,"set_eof","","Sets the BIO's EOF state.",3,{"inputs":[{"name":"membio"},{"name":"bool"}],"output":null}],[11,"read","","",3,null],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"membio"}],"output":{"name":"result"}}],[0,"crypto","openssl","",null,null],[0,"hash","openssl::crypto","",null,null],[3,"Hasher","openssl::crypto::hash","Provides message digest (hash) computation.",null,null],[4,"Type","","Message digest (hash) type.",null,null],[13,"MD5","","",4,null],[13,"SHA1","","",4,null],[13,"SHA224","","",4,null],[13,"SHA256","","",4,null],[13,"SHA384","","",4,null],[13,"SHA512","","",4,null],[13,"RIPEMD160","","",4,null],[5,"hash","","Computes the hash of the `data` with the hash `t`.",null,null],[11,"clone","","",4,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"md_len","","Returns the length of the message digest.",4,{"inputs":[{"name":"type"}],"output":{"name":"usize"}}],[11,"evp_md","","Internal interface subject to removal.",4,null],[11,"new","","Creates a new `Hasher` with the specified hash type.",5,{"inputs":[{"name":"hasher"},{"name":"type"}],"output":{"name":"hasher"}}],[11,"finish","","Returns the hash of the data written since creation or\nthe last `finish` and resets the hasher.",5,{"inputs":[{"name":"hasher"}],"output":{"name":"vec"}}],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"hasher"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"hasher"}],"output":{"name":"hasher"}}],[11,"drop","","",5,{"inputs":[{"name":"hasher"}],"output":null}],[0,"hmac","openssl::crypto","",null,null],[3,"HMAC","openssl::crypto::hmac","Provides HMAC computation.",null,null],[5,"hmac","","Computes the HMAC of the `data` with the hash `t` and `key`.",null,null],[11,"new","","Creates a new `HMAC` with the specified hash type using the `key`.",6,null],[11,"finish","","Returns the hash of the data written since creation or\nthe last `finish` and resets the hasher.",6,{"inputs":[{"name":"hmac"}],"output":{"name":"vec"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"hmac"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"hmac"}],"output":{"name":"hmac"}}],[11,"drop","","",6,{"inputs":[{"name":"hmac"}],"output":null}],[0,"pkcs5","openssl::crypto","",null,null],[5,"pbkdf2_hmac_sha1","openssl::crypto::pkcs5","Derives a key from a password and salt using the PBKDF2-HMAC-SHA1 algorithm.",null,null],[0,"pkey","openssl::crypto","",null,null],[3,"PKey","openssl::crypto::pkey","",null,null],[4,"Parts","","",null,null],[13,"Neither","","",7,null],[13,"Public","","",7,null],[13,"Both","","",7,null],[4,"Role","","Represents a role an asymmetric key might be appropriate for.",null,null],[13,"Encrypt","","",8,null],[13,"Decrypt","","",8,null],[13,"Sign","","",8,null],[13,"Verify","","",8,null],[4,"EncryptionPadding","","Type of encryption padding to use.",null,null],[13,"OAEP","","",9,null],[13,"PKCS1v15","","",9,null],[11,"clone","","",7,{"inputs":[{"name":"parts"}],"output":{"name":"parts"}}],[11,"clone","","",8,{"inputs":[{"name":"role"}],"output":{"name":"role"}}],[11,"clone","","",9,{"inputs":[{"name":"encryptionpadding"}],"output":{"name":"encryptionpadding"}}],[11,"new","","",10,{"inputs":[{"name":"pkey"}],"output":{"name":"pkey"}}],[11,"from_handle","","",10,null],[11,"private_key_from_pem","","Reads private key from PEM, takes ownership of handle",10,{"inputs":[{"name":"pkey"},{"name":"r"}],"output":{"name":"result"}}],[11,"gen","","",10,{"inputs":[{"name":"pkey"},{"name":"usize"}],"output":null}],[11,"save_pub","","Returns a serialized form of the public key, suitable for load_pub().",10,{"inputs":[{"name":"pkey"}],"output":{"name":"vec"}}],[11,"load_pub","","Loads a serialized form of the public key, as produced by save_pub().",10,null],[11,"save_priv","","Returns a serialized form of the public and private keys, suitable for\nload_priv().",10,{"inputs":[{"name":"pkey"}],"output":{"name":"vec"}}],[11,"load_priv","","Loads a serialized form of the public and private keys, as produced by\nsave_priv().",10,null],[11,"write_pem","","Stores private key as a PEM",10,{"inputs":[{"name":"pkey"},{"name":"w"}],"output":{"name":"result"}}],[11,"size","","Returns the size of the public key modulus.",10,{"inputs":[{"name":"pkey"}],"output":{"name":"usize"}}],[11,"can","","Returns whether this pkey object can perform the specified role.",10,{"inputs":[{"name":"pkey"},{"name":"role"}],"output":{"name":"bool"}}],[11,"max_data","","Returns the maximum amount of data that can be encrypted by an encrypt()\ncall.",10,{"inputs":[{"name":"pkey"}],"output":{"name":"usize"}}],[11,"encrypt_with_padding","","",10,null],[11,"decrypt_with_padding","","",10,null],[11,"encrypt","","Encrypts data using OAEP padding, returning the encrypted data. The\nsupplied data must not be larger than max_data().",10,null],[11,"decrypt","","Decrypts data, expecting OAEP padding, returning the decrypted data.",10,null],[11,"sign","","Signs data, using OpenSSL's default scheme and adding sha256 ASN.1 information to the\nsignature.\nThe bytes to sign must be the result of a sha256 hashing;\nreturns the signature.",10,null],[11,"verify","","Verifies a signature s (using OpenSSL's default scheme and sha256) on the SHA256 hash of a\nmessage.\nReturns true if the signature is valid, and false otherwise.",10,null],[11,"sign_with_hash","","Signs data, using OpenSSL's default scheme and add ASN.1 information for the given hash type to the\nsignature.\nThe bytes to sign must be the result of this type of hashing;\nreturns the signature.",10,null],[11,"verify_with_hash","","",10,null],[11,"get_handle","","",10,null],[11,"public_eq","","",10,{"inputs":[{"name":"pkey"},{"name":"pkey"}],"output":{"name":"bool"}}],[11,"drop","","",10,{"inputs":[{"name":"pkey"}],"output":null}],[0,"rand","openssl::crypto","",null,null],[5,"rand_bytes","openssl::crypto::rand","",null,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[0,"symm","openssl::crypto","",null,null],[3,"Crypter","openssl::crypto::symm","Represents a symmetric cipher context.",null,null],[4,"Mode","","",null,null],[13,"Encrypt","","",11,null],[13,"Decrypt","","",11,null],[4,"Type","","",null,null],[13,"AES_128_ECB","","",12,null],[13,"AES_128_CBC","","",12,null],[13,"AES_128_XTS","","Requires the `aes_xts` feature",12,null],[13,"AES_256_ECB","","",12,null],[13,"AES_256_CBC","","",12,null],[13,"AES_256_XTS","","Requires the `aes_xts` feature",12,null],[13,"RC4_128","","",12,null],[5,"encrypt","","Encrypts data, using the specified crypter type in encrypt mode with the\nspecified key and iv; returns the resulting (encrypted) data.",null,null],[5,"decrypt","","Decrypts data, using the specified crypter type in decrypt mode with the\nspecified key and iv; returns the resulting (decrypted) data.",null,null],[11,"clone","","",11,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"clone","","",12,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"new","","",13,{"inputs":[{"name":"crypter"},{"name":"type"}],"output":{"name":"crypter"}}],[11,"pad","","Enables or disables padding. If padding is disabled, total amount of\ndata encrypted must be a multiple of block size.",13,{"inputs":[{"name":"crypter"},{"name":"bool"}],"output":null}],[11,"init","","Initializes this crypter.",13,null],[11,"update","","Update this crypter with more data to encrypt or decrypt. Returns\nencrypted or decrypted bytes.",13,null],[11,"finalize","","Finish crypting. Returns the remaining partial block of output, if any.",13,{"inputs":[{"name":"crypter"}],"output":{"name":"vec"}}],[11,"drop","","",13,{"inputs":[{"name":"crypter"}],"output":null}],[0,"memcmp","openssl::crypto","",null,null],[5,"eq","openssl::crypto::memcmp","Returns `true` iff `a` and `b` contain the same bytes.",null,null],[0,"ssl","openssl","",null,null],[3,"SslContextOptions","openssl::ssl","",null,null],[3,"SslVerifyMode","","",null,null],[3,"SslContext","","An SSL context object",null,null],[3,"Ssl","","",null,null],[3,"SslStream","","A stream wrapper which handles SSL encryption for an underlying stream.",null,null],[4,"SslMethod","","Determines the SSL method supported",null,null],[13,"Sslv2","","Only support the SSLv2 protocol, requires the `sslv2` feature.",14,null],[13,"Sslv23","","Support the SSLv2, SSLv3 and TLSv1 protocols.",14,null],[13,"Sslv3","","Only support the SSLv3 protocol.",14,null],[13,"Tlsv1","","Only support the TLSv1 protocol.",14,null],[13,"Tlsv1_1","","Support TLSv1.1 protocol, requires the `tlsv1_1` feature.",14,null],[13,"Tlsv1_2","","Support TLSv1.2 protocol, requires the `tlsv1_2` feature.",14,null],[13,"Dtlsv1","","Support DTLSv1 protocol, requires the `dtlsv1` feature.",14,null],[13,"Dtlsv1_2","","Support DTLSv1.2 protocol, requires the `dtlsv1_2` feature.",14,null],[4,"MaybeSslStream","","A utility type to help in cases where the use of SSL is decided at runtime.",null,null],[13,"Ssl","","A connection using SSL",15,null],[13,"Normal","","A connection not using SSL",15,null],[0,"error","","",null,null],[4,"SslError","openssl::ssl::error","An SSL error",null,null],[13,"StreamError","","The underlying stream reported an error",16,null],[13,"SslSessionClosed","","The SSL session has been closed by the other end",16,null],[13,"OpenSslErrors","","An error in the OpenSSL library",16,null],[4,"OpensslError","","An error from the OpenSSL library",null,null],[13,"UnknownError","","An unknown error",17,null],[12,"library","openssl::ssl::error::OpensslError","The library reporting the error",17,null],[12,"function","","The function reporting the error",17,null],[12,"reason","","The reason for the error",17,null],[11,"fmt","openssl::ssl::error","",16,{"inputs":[{"name":"sslerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"sslerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",16,{"inputs":[{"name":"sslerror"}],"output":{"name":"str"}}],[11,"cause","","",16,{"inputs":[{"name":"sslerror"}],"output":{"name":"option"}}],[11,"eq","","",17,{"inputs":[{"name":"opensslerror"},{"name":"opensslerror"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"opensslerror"},{"name":"opensslerror"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"opensslerror"}],"output":{"name":"opensslerror"}}],[11,"fmt","","",17,{"inputs":[{"name":"opensslerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Creates a new `OpenSslErrors` with the current contents of the error\nstack.",16,{"inputs":[{"name":"sslerror"}],"output":{"name":"sslerror"}}],[11,"from_error","","Creates an `SslError` from the raw numeric error code.",16,{"inputs":[{"name":"sslerror"},{"name":"c_ulong"}],"output":{"name":"sslerror"}}],[6,"VerifyCallback","openssl::ssl","The signature of functions that can be used to manually verify certificates",null,null],[6,"VerifyCallbackData","","The signature of functions that can be used to manually verify certificates\nwhen user-data should be carried for all verification process",null,null],[17,"SSL_OP_LEGACY_SERVER_CONNECT","","",null,null],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_TLSEXT_PADDING","","",null,null],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",null,null],[17,"SSL_OP_SAFARI_ECDHE_ECDSA_BUG","","",null,null],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",null,null],[17,"SSL_OP_TLS_D5_BUG","","",null,null],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",null,null],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","",null,null],[17,"SSL_OP_ALL","","",null,null],[17,"SSL_OP_NO_QUERY_MTU","","",null,null],[17,"SSL_OP_COOKIE_EXCHANGE","","",null,null],[17,"SSL_OP_NO_TICKET","","",null,null],[17,"SSL_OP_CISCO_ANYCONNECT","","",null,null],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","",null,null],[17,"SSL_OP_NO_COMPRESSION","","",null,null],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","",null,null],[17,"SSL_OP_SINGLE_ECDH_USE","","",null,null],[17,"SSL_OP_SINGLE_DH_USE","","",null,null],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","",null,null],[17,"SSL_OP_TLS_ROLLBACK_BUG","","",null,null],[17,"SSL_OP_NO_SSLV2","","",null,null],[17,"SSL_OP_NO_SSLV3","","",null,null],[17,"SSL_OP_NO_TLSV1","","",null,null],[17,"SSL_OP_NO_TLSV1_2","","",null,null],[17,"SSL_OP_NO_TLSV1_1","","",null,null],[17,"SSL_OP_NO_DTLSV1","","",null,null],[17,"SSL_OP_NO_DTLSV1_2","","",null,null],[17,"SSL_VERIFY_PEER","","/// Verify that the server's certificate is trusted",null,null],[17,"SSL_VERIFY_NONE","","/// Do not verify the server's certificate",null,null],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","/// Terminate handshake if client did not return a certificate.\n/// Use together with SSL_VERIFY_PEER.",null,null],[11,"hash","","",18,null],[11,"cmp","","",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"eq","","",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",18,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"all","","Returns the set containing all flags.",18,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",18,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"c_long"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"c_long"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"c_long"}],"output":{"name":"sslcontextoptions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",18,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"sub","","Returns the set difference of the two sets of flags.",18,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"not","","Returns the complement of this set of flags.",18,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"eq","","",14,{"inputs":[{"name":"sslmethod"},{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"sslmethod"},{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"sslmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"sslmethod"}],"output":{"name":"sslmethod"}}],[11,"is_dtlsv1","","",14,{"inputs":[{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"is_dtlsv1_2","","",14,{"inputs":[{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"is_dtls","","",14,{"inputs":[{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"cmp","","",19,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"eq","","",19,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"sslverifymode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",19,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"all","","Returns the set containing all flags.",19,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",19,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",19,{"inputs":[{"name":"sslverifymode"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",19,{"inputs":[{"name":"sslverifymode"},{"name":"i32"}],"output":{"name":"sslverifymode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",19,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",19,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",19,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",19,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",19,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",19,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",19,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",19,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",19,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",19,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",19,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"not","","Returns the complement of this set of flags.",19,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",20,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",20,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",20,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",20,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"from","alloc::boxed","",21,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",21,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",21,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",21,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",22,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",23,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","core::num","",24,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","","",25,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","collections::string","",26,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",27,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"is","openssl","Returns true if the boxed type is the same as `T`",28,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",28,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",28,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",28,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",28,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",28,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",28,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",28,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"into_ascii_uppercase","collections::string","",29,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"into_ascii_lowercase","","",29,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"into_ascii_uppercase","collections::vec","",30,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"into_ascii_lowercase","","",30,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"next","std::ascii","",31,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"next_back","","",31,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"shl","core::num","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"clone","std::thread::local","",33,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[11,"eq","","",33,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"with","","Acquires a reference to the value in this TLS key.",34,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",34,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[11,"new","std::thread::local::imp","",35,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",35,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",36,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",36,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",36,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[11,"new","std::thread::scoped_tls::imp","",37,{"inputs":[{"name":"keyinner"}],"output":{"name":"keyinner"}}],[11,"set","","",37,null],[11,"get","","",37,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",38,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",38,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",38,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",38,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"scoped","","Spawns a new child thread that must be joined within a given\nscope, and returns a `JoinGuard`.",38,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",39,null],[11,"name","","Gets the thread's name.",39,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"fmt","","",39,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",39,{"inputs":[{"name":"thread"},{"name":"option"}],"output":{"name":"thread"}}],[11,"thread","","Extracts a handle to the underlying thread",40,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",40,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"thread","","Extracts a handle to the thread this guard will join on.",41,{"inputs":[{"name":"joinguard"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish, returning the result of the\nthread's calculation.",41,{"inputs":[{"name":"joinguard"}],"output":{"name":"t"}}],[11,"drop","","",41,null],[11,"clone","std::collections::hash::table","",42,{"inputs":[{"name":"rawbucket"}],"output":{"name":"rawbucket"}}],[11,"clone","","",43,{"inputs":[{"name":"bucket"}],"output":{"name":"bucket"}}],[11,"clone","","",44,{"inputs":[{"name":"safehash"}],"output":{"name":"safehash"}}],[11,"eq","","",44,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",44,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"table","","Borrow a reference to the table.",45,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",45,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",45,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",46,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",46,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",43,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",43,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",43,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",43,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",43,{"inputs":[{"name":"bucket"},{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",43,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",43,null],[11,"next","","",46,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",46,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",46,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",46,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",45,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",45,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",45,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",45,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",45,null],[11,"take","","Removes this bucket's key and value from the hashtable.",45,null],[11,"replace","","",45,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",45,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",45,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",45,null],[11,"expect_full","","",47,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",48,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",48,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",49,{"inputs":[{"name":"rawtable"},{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable's capacity, similar to a vector's.",49,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",49,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"iter","","",49,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",49,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",49,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",49,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"clone","","",50,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[11,"next","","",50,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[11,"next","","",51,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",52,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",52,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"len","","",52,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",53,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"len","","",53,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",54,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"len","","",54,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",55,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"len","","",55,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",55,null],[11,"clone","","",49,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",49,null],[11,"clone","std::collections::hash::map","",56,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"clone","","",57,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty HashMap.",57,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",57,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Creates an empty hashmap which will use the given hasher to hash keys.",57,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",57,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",57,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",57,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",57,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",57,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",57,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",57,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",57,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",57,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",57,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",57,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",57,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",57,null],[11,"get","","Returns a reference to the value corresponding to the key.",57,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",57,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",57,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",57,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",57,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",57,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",57,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"index","","",57,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",59,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",60,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",57,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"next","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"len","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",61,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"len","","",61,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",62,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"len","","",62,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",59,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"len","","",59,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",60,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"len","","",60,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",63,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"len","","",63,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",64,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",64,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",64,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",65,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",65,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",65,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",65,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",65,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",66,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",57,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",57,null],[11,"clone","","",67,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",67,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"hasher","","",67,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",67,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"clone","std::collections::hash::set","",68,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty HashSet.",68,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",68,{"inputs":[{"name":"hashset"},{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hash_state","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",68,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",68,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",68,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",68,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",68,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",68,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",68,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",68,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",68,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",68,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",68,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",68,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",68,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",68,null],[11,"contains","","Returns `true` if the set contains a value.",68,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",68,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",68,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",68,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",68,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",68,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"eq","","",68,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",68,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",68,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",68,null],[11,"default","","",68,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",68,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",69,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",69,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"len","","",69,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",70,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"len","","",70,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",71,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"len","","",71,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",72,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",72,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"clone","","",73,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",73,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"clone","","",74,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",74,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"clone","","",75,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",75,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"hasher","std::collections::hash::state","",76,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",76,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",76,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"clone","collections::binary_heap","",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"default","","",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",77,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",77,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",77,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",77,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",77,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",77,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",77,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",77,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",77,null],[11,"drop","","",78,null],[11,"clone","","",79,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",79,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",80,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",81,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"next_back","","",81,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from_iter","","",77,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",77,null],[11,"extend","","",77,null],[11,"clone","collections::linked_list","",82,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",83,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",84,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",84,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",85,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",85,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",85,null],[11,"iter","","Provides a forward iterator.",85,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",85,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",85,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",85,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",85,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",85,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",85,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",85,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",85,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",85,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",85,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",85,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",85,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",85,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",85,null],[11,"next","","",82,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next_back","","",82,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",86,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"next_back","","",86,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",86,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",86,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",83,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",85,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",85,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",85,null],[11,"extend","","",85,null],[11,"eq","","",85,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",85,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",85,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",85,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",85,null],[11,"clone","collections::vec_deque","",87,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",87,null],[11,"default","","",87,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",87,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",87,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",87,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",87,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",87,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",87,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",87,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Ringbuf`. The collection may reserve more space to avoid frequent reallocations.",87,null],[11,"shrink_to_fit","","Shrinks the capacity of the ringbuf as much as possible.",87,null],[11,"truncate","","Shortens a ringbuf, dropping excess elements from the back.",87,null],[11,"iter","","Returns a front-to-back iterator.",87,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",87,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",87,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",87,null],[11,"len","","Returns the number of elements in the `VecDeque`.",87,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",87,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Creates a draining iterator that clears the `VecDeque` and iterates over\nthe removed items from start to end.",87,{"inputs":[{"name":"vecdeque"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",87,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",87,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",87,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",87,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",87,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",87,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",87,null],[11,"push_back","","Appends an element to the back of a buffer",87,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",87,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_back_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the last\nelement.",87,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","Removes an element from anywhere in the ringbuf and returns it,\nreplacing it with the first element.",87,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at position `i` within the ringbuf. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",87,null],[11,"remove","","Removes and returns the element at position `i` from the ringbuf.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `i` is out of bounds.",87,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",87,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",87,null],[11,"retain","","Retains only the elements specified by the predicate.",87,null],[11,"resize","","Modifies the ringbuf in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",87,null],[11,"clone","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"next_back","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"indexable","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"idx","","",88,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",89,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"next_back","","",89,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",90,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",90,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"next_back","","",90,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",91,null],[11,"next","","",91,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"next_back","","",91,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",87,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",87,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",87,null],[11,"index","","",87,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",87,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",87,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",87,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",87,null],[11,"extend","","",87,null],[11,"fmt","","",87,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","collections::vec_map","",92,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone","","",92,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone_from","","",92,null],[11,"hash","","",92,null],[11,"new","","Creates an empty `VecMap`.",92,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",92,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",92,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",92,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",92,null],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator's element type is `usize`.",92,{"inputs":[{"name":"vecmap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator's element type is `&'r V`.",92,{"inputs":[{"name":"vecmap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator's element type is `(usize, &'r V)`.",92,{"inputs":[{"name":"vecmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator's element type is `(usize, &'r mut V)`.",92,{"inputs":[{"name":"vecmap"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",92,null],[11,"split_off","","Splits the collection into two at the given key.",92,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, emptying (but not consuming) the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",92,{"inputs":[{"name":"vecmap"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",92,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",92,{"inputs":[{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",92,null],[11,"get","","Returns a reference to the value corresponding to the key.",92,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",92,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",92,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",92,{"inputs":[{"name":"vecmap"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",92,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",92,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",93,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and\nreturns a mutable reference to the value in the entry.",93,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default\nfunction if empty, and returns a mutable reference to the value in the\nentry.",93,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",94,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",95,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",95,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",95,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",95,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",95,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"eq","","",92,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",92,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"option"}}],[11,"cmp","","",92,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"ordering"}}],[11,"fmt","","",92,{"inputs":[{"name":"vecmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",92,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":{"name":"vecmap"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`.",92,{"inputs":[{"name":"vecmap"}],"output":{"name":"intoiter"}}],[11,"extend","","",92,null],[11,"extend","","",92,null],[11,"index","","",92,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",92,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",92,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",92,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",96,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",96,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",97,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",99,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",100,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",98,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",99,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next_back","","",99,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",101,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","std::dynamic_lib","",102,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",102,{"inputs":[{"name":"dynamiclibrary"},{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",102,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",102,null],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",102,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",102,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",102,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","std::env","",103,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next","","",104,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"clone","","",105,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"eq","","",105,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"fmt","","",105,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",105,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[11,"next","","",106,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"fmt","","",107,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",107,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",108,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"len","","",108,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",109,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"len","","",109,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"hash","std::ffi::c_str","",110,null],[11,"cmp","","",110,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",110,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",110,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",110,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",110,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",110,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",110,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"hash","","",111,null],[11,"fmt","","",112,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",112,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",110,{"inputs":[{"name":"cstring"},{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",110,{"inputs":[{"name":"cstring"},{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_ptr","","Retakes ownership of a CString that was transferred to C.",110,null],[11,"into_ptr","","Transfers ownership of the string to a C caller.",110,null],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",110,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",110,null],[11,"clone","","",110,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",111,null],[11,"as_ptr","","Returns the inner pointer to this C string.",111,null],[11,"to_bytes","","Converts this C string to a byte slice.",111,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",111,null],[11,"to_str","","Yields a `&str` slice if the `CStr` contains valid UTF-8.",111,{"inputs":[{"name":"cstr"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow<str>`.",111,{"inputs":[{"name":"cstr"}],"output":{"name":"cow"}}],[11,"deref","","",110,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"fmt","","",110,{"inputs":[{"name":"cstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",112,{"inputs":[{"name":"nulerror"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",112,{"inputs":[{"name":"nulerror"}],"output":{"name":"vec"}}],[11,"description","","",112,{"inputs":[{"name":"nulerror"}],"output":{"name":"str"}}],[11,"fmt","","",112,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",113,{"inputs":[{"name":"error"},{"name":"nulerror"}],"output":{"name":"error"}}],[11,"eq","std::ffi::c_str","",111,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",111,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",111,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"clone","std::ffi::os_str","",114,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",114,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"from_bytes","","Constructs an `OsString` from a byte sequence.",114,{"inputs":[{"name":"osstring"},{"name":"b"}],"output":{"name":"option"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",114,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",114,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given `&OsStr` slice.",114,null],[11,"from","","",114,{"inputs":[{"name":"osstring"},{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",114,{"inputs":[{"name":"osstring"},{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",114,{"inputs":[{"name":"osstring"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"new","","Coerces into an `OsStr` slice.",115,{"inputs":[{"name":"osstr"},{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `OsStr` is valid unicode.",115,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow<str>`.",115,{"inputs":[{"name":"osstr"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned `OsString`.",115,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"to_bytes","","Yields this `OsStr` as a byte slice.",115,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_cstring","","Creates a `CString` containing this `OsStr` data.",115,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"deref","","",114,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"fmt","","",114,{"inputs":[{"name":"osstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",114,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",114,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",114,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",114,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",114,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",114,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",114,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",114,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",114,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",114,null],[11,"eq","","",115,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",115,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",115,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",115,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",115,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",115,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",115,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",115,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",115,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"hash","","",115,null],[11,"fmt","","",115,{"inputs":[{"name":"osstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",114,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"to_owned","","",115,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"as_ref","","",115,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_ref","","",114,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_ref","collections::string","",29,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"clone","std::fs","",116,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",117,{"inputs":[{"name":"permissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",117,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"hash","","",118,null],[11,"eq","","",118,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"open","","Attempts to open a file in read-only mode.",119,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",119,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",119,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",119,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",119,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",119,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",119,null],[11,"write","","",119,null],[11,"flush","","",119,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",119,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank net set of options ready for configuration.",116,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",116,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",116,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",116,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",116,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",116,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",116,{"inputs":[{"name":"openoptions"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",120,{"inputs":[{"name":"metadata"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",120,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",120,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",120,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",120,{"inputs":[{"name":"metadata"}],"output":{"name":"permissions"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",117,{"inputs":[{"name":"permissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",117,null],[11,"is_dir","","Test whether this file type represents a directory.",118,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",118,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",118,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"next","","",121,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",122,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",122,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",122,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",122,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"next","","",123,{"inputs":[{"name":"walkdir"}],"output":{"name":"option"}}],[11,"metadata","std::path","",124,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","",124,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","",124,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","",124,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","",124,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","",124,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","",124,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","",124,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"new","std::fs","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",125,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",125,{"inputs":[{"name":"dirbuilder"},{"name":"bool"}],"output":{"name":"dirbuilder"}}],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",125,{"inputs":[{"name":"dirbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity",126,{"inputs":[{"name":"bufreader"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity",126,{"inputs":[{"name":"bufreader"},{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",126,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",126,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",126,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read","","",126,null],[11,"fill_buf","","",126,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",126,null],[11,"fmt","","",126,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",126,{"inputs":[{"name":"bufreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity",128,{"inputs":[{"name":"bufwriter"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity",128,{"inputs":[{"name":"bufwriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",128,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying write.",128,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",128,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"write","","",128,null],[11,"flush","","",128,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"bufwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",128,{"inputs":[{"name":"bufwriter"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",128,null],[11,"error","","Returns the error which caused the call to `into_inner` to fail.",127,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",127,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"w"}}],[11,"from","std::io::error","",113,{"inputs":[{"name":"error"},{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",127,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"str"}}],[11,"fmt","","",127,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`",129,{"inputs":[{"name":"linewriter"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",129,{"inputs":[{"name":"linewriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",129,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",129,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",129,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"write","","",129,null],[11,"flush","","",129,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"linewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",130,null],[11,"with_capacities","","Creates a new buffered stream with explicitly listed capacities for the\nreader/writer buffer.",131,{"inputs":[{"name":"bufstream"},{"name":"usize"},{"name":"usize"},{"name":"s"}],"output":{"name":"bufstream"}}],[11,"new","","Creates a new buffered stream with the default reader/writer buffer\ncapacities.",131,{"inputs":[{"name":"bufstream"},{"name":"s"}],"output":{"name":"bufstream"}}],[11,"get_ref","","Gets a reference to the underlying stream.",131,{"inputs":[{"name":"bufstream"}],"output":{"name":"s"}}],[11,"get_mut","","Gets a mutable reference to the underlying stream.",131,{"inputs":[{"name":"bufstream"}],"output":{"name":"s"}}],[11,"into_inner","","Unwraps this `BufStream`, returning the underlying stream.",131,{"inputs":[{"name":"bufstream"}],"output":{"name":"result"}}],[11,"fill_buf","","",131,{"inputs":[{"name":"bufstream"}],"output":{"name":"result"}}],[11,"consume","","",131,null],[11,"read","","",131,null],[11,"write","","",131,null],[11,"flush","","",131,{"inputs":[{"name":"bufstream"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"bufstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::io::cursor","",132,{"inputs":[{"name":"cursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",132,{"inputs":[{"name":"cursor"},{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",132,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",132,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",132,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"position","","Returns the current value of this cursor",132,{"inputs":[{"name":"cursor"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the value of this cursor",132,null],[11,"seek","","",132,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"seek","","",132,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"seek","","",132,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",132,null],[11,"read","","",132,null],[11,"read","","",132,null],[11,"fill_buf","","",132,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",132,null],[11,"fill_buf","","",132,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",132,null],[11,"fill_buf","","",132,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",132,null],[11,"write","","",132,null],[11,"flush","","",132,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",132,null],[11,"flush","","",132,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"fmt","std::io::error","",113,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"custom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",134,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",113,{"inputs":[{"name":"error"},{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",113,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",113,{"inputs":[{"name":"error"},{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",113,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",113,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",113,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",113,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",113,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"fmt","","",135,{"inputs":[{"name":"repr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",113,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",113,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"read","alloc::boxed","",21,null],[11,"read_to_end","","",21,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",21,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","","",21,null],[11,"flush","","",21,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","","",21,null],[11,"write_fmt","","",21,{"inputs":[{"name":"box"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",21,{"inputs":[{"name":"box"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",21,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"consume","","",21,null],[11,"read_until","","",21,{"inputs":[{"name":"box"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",21,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","collections::vec","",30,null],[11,"write_all","","",30,null],[11,"flush","","",30,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"new","std::io::lazy","",136,null],[11,"get","","",136,{"inputs":[{"name":"lazy"}],"output":{"name":"option"}}],[11,"read","std::io::util","",137,null],[11,"fill_buf","","",137,{"inputs":[{"name":"empty"}],"output":{"name":"result"}}],[11,"consume","","",137,null],[11,"read","","",138,null],[11,"write","","",139,null],[11,"flush","","",139,{"inputs":[{"name":"sink"}],"output":{"name":"result"}}],[11,"read","std::io::stdio","",140,null],[11,"write","","",141,null],[11,"flush","","",141,{"inputs":[{"name":"stdoutraw"}],"output":{"name":"result"}}],[11,"write","","",142,null],[11,"flush","","",142,{"inputs":[{"name":"stderrraw"}],"output":{"name":"result"}}],[11,"write","","",143,null],[11,"flush","","",143,{"inputs":[{"name":"maybe"}],"output":{"name":"result"}}],[11,"read","","",143,null],[11,"lock","","Locks this handle to the standard input stream, returning a readable\nguard.",144,{"inputs":[{"name":"stdin"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",144,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",144,null],[11,"read_to_end","","",144,{"inputs":[{"name":"stdin"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",144,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",145,null],[11,"fill_buf","","",145,{"inputs":[{"name":"stdinlock"}],"output":{"name":"result"}}],[11,"consume","","",145,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",146,{"inputs":[{"name":"stdout"}],"output":{"name":"stdoutlock"}}],[11,"write","","",146,null],[11,"flush","","",146,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write_all","","",146,null],[11,"write_fmt","","",146,{"inputs":[{"name":"stdout"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",147,null],[11,"flush","","",147,{"inputs":[{"name":"stdoutlock"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",148,{"inputs":[{"name":"stderr"}],"output":{"name":"stderrlock"}}],[11,"write","","",148,null],[11,"flush","","",148,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write_all","","",148,null],[11,"write_fmt","","",148,{"inputs":[{"name":"stderr"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",149,null],[11,"flush","","",149,{"inputs":[{"name":"stderrlock"}],"output":{"name":"result"}}],[11,"fmt","std::io","",150,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",150,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",151,null],[11,"flush","","",151,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",152,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",153,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",153,null],[11,"fill_buf","","",153,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",153,null],[11,"read","","",154,null],[11,"next","","",155,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",156,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",157,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",156,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",156,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",156,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",158,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",159,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"cmp","std::net::ip","",160,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",160,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",160,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",160,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",160,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",160,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",160,null],[11,"fmt","","",160,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",160,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"clone","","",160,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",161,{"inputs":[{"name":"ipv6multicastscope"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",161,null],[11,"clone","","",161,{"inputs":[{"name":"ipv6multicastscope"}],"output":{"name":"ipv6multicastscope"}}],[11,"eq","","",161,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",162,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",162,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address 0.0.0.0.",162,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",162,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",162,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",162,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",162,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",162,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address.",162,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",162,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",162,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",162,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",160,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",162,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",162,null],[11,"partial_cmp","","",162,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"cmp","","",162,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","",162,{"inputs":[{"name":"ipv4addr"},{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",163,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",163,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address ::.",163,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1).",163,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",163,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",163,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",163,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",163,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",163,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",163,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address.",163,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",163,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"fmt","","",163,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",163,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",163,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",163,null],[11,"partial_cmp","","",163,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"cmp","","",163,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"fmt","std::net::addr","",164,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",164,null],[11,"eq","","",164,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"clone","","",164,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",164,{"inputs":[{"name":"socketaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",164,{"inputs":[{"name":"socketaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Returns the port number associated with this socket address.",164,{"inputs":[{"name":"socketaddr"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",165,{"inputs":[{"name":"socketaddrv4"},{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",165,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"ipv4addr"}}],[11,"port","","Returns the port number associated with this socket address.",165,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",166,{"inputs":[{"name":"socketaddrv6"},{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",166,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"ipv6addr"}}],[11,"port","","Returns the port number associated with this socket address.",166,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u16"}}],[11,"flowinfo","","Returns scope ID associated with this address, corresponding to the\n`sin6_flowinfo` field in C.",166,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"scope_id","","Returns scope ID associated with this address, corresponding to the\n`sin6_scope_id` field in C.",166,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"fmt","","",164,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",165,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",166,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",165,{"inputs":[{"name":"socketaddrv4"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",166,{"inputs":[{"name":"socketaddrv6"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",165,null],[11,"hash","","",166,null],[11,"to_socket_addrs","","",164,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",165,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",166,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"result"}}],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",167,{"inputs":[{"name":"tcpstream"},{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",167,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",167,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",167,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",167,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_nodelay","","Sets the nodelay flag on this connection to the boolean specified.",167,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","Sets the keepalive timeout to the timeout specified.",167,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",167,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",167,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",167,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",167,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",167,null],[11,"write","","",167,null],[11,"flush","","",167,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",168,{"inputs":[{"name":"tcplistener"},{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",168,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",168,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",168,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",168,{"inputs":[{"name":"tcplistener"}],"output":{"name":"incoming"}}],[11,"next","","",169,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"fmt","","",168,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",170,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",170,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",170,null],[11,"local_addr","","Returns the socket address that this socket was created from.",170,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",170,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_broadcast","","Sets the broadcast flag on or off.",170,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","Sets the multicast loop flag to the specified value.",170,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","Joins a multicast IP address (becomes a member of it).",170,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","Leaves a multicast IP address (drops membership from it).",170,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","Sets the multicast TTL.",170,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_time_to_live","","Sets this socket's TTL.",170,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",170,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",170,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",170,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",170,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","std::net::ip","",160,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",162,{"inputs":[{"name":"ipv4addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",163,{"inputs":[{"name":"ipv6addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",164,{"inputs":[{"name":"socketaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",171,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"addrparseerror"}}],[11,"fmt","","",171,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::net","",172,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",172,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",172,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"next","","",173,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"as_raw_fd","std::fs","",119,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",119,{"inputs":[{"name":"file"},{"name":"i32"}],"output":{"name":"file"}}],[11,"as_raw_fd","std::net::tcp","",167,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",168,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::udp","",170,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","std::net::tcp","",167,{"inputs":[{"name":"tcpstream"},{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",168,{"inputs":[{"name":"tcplistener"},{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",170,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"from_vec","std::ffi::os_str","",114,{"inputs":[{"name":"osstring"},{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",114,{"inputs":[{"name":"osstring"}],"output":{"name":"vec"}}],[11,"from_bytes","","",115,null],[11,"as_bytes","","",115,null],[11,"mode","std::fs","",117,{"inputs":[{"name":"permissions"}],"output":{"name":"u32"}}],[11,"set_mode","","",117,null],[11,"from_mode","","",117,{"inputs":[{"name":"permissions"},{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",116,{"inputs":[{"name":"openoptions"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"dev","","",120,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"ino","","",120,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"mode","","",120,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"nlink","","",120,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"uid","","",120,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"gid","","",120,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"rdev","","",120,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"size","","",120,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime","","",120,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",120,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime","","",120,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",120,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime","","",120,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",120,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blksize","","",120,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blocks","","",120,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ino","","",122,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"mode","","",125,{"inputs":[{"name":"dirbuilder"},{"name":"u32"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",174,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",174,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"signal","","",175,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"from_raw_fd","","",176,{"inputs":[{"name":"stdio"},{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",177,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",178,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",179,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"eq","std::path","",180,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",180,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",180,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",180,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",180,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",180,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",180,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"hash","","",180,null],[11,"fmt","","",180,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",180,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",180,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"fmt","","",181,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",181,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",181,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",181,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",181,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",181,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",181,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",181,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",182,{"inputs":[{"name":"prefixcomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",182,null],[11,"clone","","",182,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefixcomponent"}}],[11,"kind","","The parsed prefix data.",182,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",182,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"osstr"}}],[11,"eq","","",182,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",182,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",182,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"fmt","","",183,{"inputs":[{"name":"component"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",183,null],[11,"cmp","","",183,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",183,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",183,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",183,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",183,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",183,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"eq","","",183,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"clone","","",183,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice",183,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"as_ref","","",183,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"clone","","",184,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"clone","","",185,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",184,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"peek","","Examine the next component without consuming it.",184,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"as_ref","","",184,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"as_ref","","",184,{"inputs":[{"name":"components"}],"output":{"name":"osstr"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",185,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",185,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",185,{"inputs":[{"name":"iter"}],"output":{"name":"osstr"}}],[11,"next","","",185,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",185,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",184,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"next_back","","",184,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"eq","","",184,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",184,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",184,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"hash","","",186,null],[11,"clone","","",186,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",186,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",186,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",186,null],[11,"pop","","Truncate `self` to `self.parent()`.",186,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",186,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",186,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",186,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",186,{"inputs":[{"name":"pathbuf"},{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",186,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",186,{"inputs":[{"name":"pathbuf"},{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",186,{"inputs":[{"name":"pathbuf"},{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",186,null],[11,"fmt","","",186,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",124,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",124,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `Path` is valid unicode.",124,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a `Cow<str>`.",124,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",124,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",124,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",124,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"prefix","","Returns the *prefix* of a path, if any.",124,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",124,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",124,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",124,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",124,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"option"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",124,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",124,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",124,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",124,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",124,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",124,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",124,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",124,{"inputs":[{"name":"path"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path's components viewed as `OsStr` slices.",124,{"inputs":[{"name":"path"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",124,{"inputs":[{"name":"path"}],"output":{"name":"display"}}],[11,"deref","","",186,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"borrow","","",186,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"into_cow","","",186,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","","",124,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"eq","","",186,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",186,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",186,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",186,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"into","","",186,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"hash","","",124,null],[11,"as_ref","","",124,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"fmt","","",124,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",187,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",187,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",124,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",124,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",124,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",124,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",115,{"inputs":[{"name":"osstr"}],"output":{"name":"path"}}],[11,"as_ref","","",114,{"inputs":[{"name":"osstring"}],"output":{"name":"path"}}],[11,"as_ref","collections::string","",29,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",186,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"write","std::process","",177,null],[11,"flush","","",177,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"read","","",178,null],[11,"read","","",179,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",174,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",174,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",174,null],[11,"env","","Inserts or updates an environment variable mapping.",174,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",174,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",174,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",174,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).",174,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).",174,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).",174,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",174,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",174,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",174,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",174,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",188,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",188,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",176,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",176,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",176,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"fmt","","",175,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",175,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",175,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",175,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",175,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",175,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",189,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",189,{"inputs":[{"name":"child"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",189,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `Output`\ninstance.",189,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"clone","std::sync::mpsc::blocking","",190,{"inputs":[{"name":"signaltoken"}],"output":{"name":"signaltoken"}}],[11,"signal","","",190,{"inputs":[{"name":"signaltoken"}],"output":{"name":"bool"}}],[11,"cast_to_usize","","Convert to an unsafe usize value. Useful for storing in a pipe's state\nflag.",190,{"inputs":[{"name":"signaltoken"}],"output":{"name":"usize"}}],[11,"cast_from_usize","","Convert from an unsafe usize value. Useful for retrieving a pipe's state\nflag.",190,{"inputs":[{"name":"signaltoken"},{"name":"usize"}],"output":{"name":"signaltoken"}}],[11,"wait","","",191,null],[11,"new","std::sync::mpsc::oneshot","",192,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",192,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"sent","","",192,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"recv","","",192,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",192,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"upgrade","","",192,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"drop_chan","","",192,null],[11,"drop_port","","",192,null],[11,"can_recv","","",192,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",192,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",192,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop","","",192,null],[11,"eq","std::sync::mpsc::select","",193,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new selection structure. This set is initially empty.",194,{"inputs":[{"name":"select"}],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",194,{"inputs":[{"name":"select"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",194,{"inputs":[{"name":"select"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",195,{"inputs":[{"name":"handle"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",195,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",195,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",195,null],[11,"drop","","",194,null],[11,"drop","","",195,null],[11,"next","","",196,{"inputs":[{"name":"packets"}],"output":{"name":"option"}}],[11,"new","std::sync::mpsc::shared","",197,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"postinit_lock","","",197,{"inputs":[{"name":"packet"}],"output":{"name":"mutexguard"}}],[11,"inherit_blocker","","",197,null],[11,"send","","",197,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",197,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",197,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",197,null],[11,"drop_chan","","",197,null],[11,"drop_port","","",197,null],[11,"can_recv","","",197,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",197,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",197,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"drop","","",197,null],[11,"new","std::sync::mpsc::stream","",198,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",198,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"upgrade","","",198,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"recv","","",198,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",198,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop_chan","","",198,null],[11,"drop_port","","",198,null],[11,"can_recv","","",198,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",198,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",198,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",198,null],[11,"fmt","std::sync::mpsc::sync","",199,{"inputs":[{"name":"failure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",200,{"inputs":[{"name":"packet"},{"name":"usize"}],"output":{"name":"packet"}}],[11,"send","","",200,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",200,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",200,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",200,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",200,null],[11,"drop_chan","","",200,null],[11,"drop_port","","",200,null],[11,"can_recv","","",200,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",200,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",200,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"drop","","",200,null],[11,"new","std::sync::mpsc::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",201,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue.",201,null],[11,"pop","","Pops some data from this queue.",201,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",201,null],[11,"new","std::sync::mpsc::spsc_queue","Creates a new queue.",202,{"inputs":[{"name":"queue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",202,null],[11,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",202,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",202,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"drop","","",202,null],[11,"clone","std::sync::mpsc","",203,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"eq","","",203,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",203,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",204,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",204,{"inputs":[{"name":"recverror"}],"output":{"name":"recverror"}}],[11,"eq","","",204,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"fmt","","",205,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",205,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"tryrecverror"}}],[11,"eq","","",205,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",206,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"eq","","",206,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",207,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",207,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"drop","","",207,null],[11,"send","","Sends a value on this synchronous channel.",208,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",208,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",208,{"inputs":[{"name":"syncsender"}],"output":{"name":"syncsender"}}],[11,"drop","","",208,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",209,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",209,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",209,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[11,"next","","",210,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",211,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",209,{"inputs":[{"name":"receiver"}],"output":{"name":"intoiter"}}],[11,"drop","","",209,null],[11,"fmt","","",203,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",203,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",203,{"inputs":[{"name":"senderror"}],"output":{"name":"str"}}],[11,"cause","","",203,{"inputs":[{"name":"senderror"}],"output":{"name":"option"}}],[11,"fmt","","",206,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",206,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",206,{"inputs":[{"name":"trysenderror"}],"output":{"name":"str"}}],[11,"cause","","",206,{"inputs":[{"name":"trysenderror"}],"output":{"name":"option"}}],[11,"fmt","","",204,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",204,{"inputs":[{"name":"recverror"}],"output":{"name":"str"}}],[11,"cause","","",204,{"inputs":[{"name":"recverror"}],"output":{"name":"option"}}],[11,"fmt","","",205,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",205,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"str"}}],[11,"cause","","",205,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"option"}}],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",212,{"inputs":[{"name":"barrier"},{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads has rendezvoused here.",212,{"inputs":[{"name":"barrier"}],"output":{"name":"barrierwaitresult"}}],[11,"is_leader","","Returns whether this thread from `wait` is the \"leader thread\".",213,{"inputs":[{"name":"barrierwaitresult"}],"output":{"name":"bool"}}],[11,"new","std::sync::condvar","Creates a new condition variable which is ready to be waited on and\nnotified.",214,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",214,{"inputs":[{"name":"condvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",214,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",214,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",214,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",214,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",214,null],[11,"drop","","",214,null],[11,"new","","Creates a new condition variable",215,{"inputs":[{"name":"staticcondvar"}],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",215,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",215,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",215,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",215,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",215,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",215,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",215,null],[11,"get","std::sync::future","Get the value of the future.",216,{"inputs":[{"name":"future"}],"output":{"name":"a"}}],[11,"into_inner","","Gets the value from this future, forcing evaluation.",216,{"inputs":[{"name":"future"}],"output":{"name":"a"}}],[11,"get_ref","","Executes the future's closure and then returns a reference\nto the result.  The reference lasts as long as\nthe future.",216,{"inputs":[{"name":"future"}],"output":{"name":"a"}}],[11,"from_value","","Create a future from a value.",216,{"inputs":[{"name":"future"},{"name":"a"}],"output":{"name":"future"}}],[11,"from_fn","","Create a future from a function.",216,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"from_receiver","","Create a future from a port",216,{"inputs":[{"name":"future"},{"name":"receiver"}],"output":{"name":"future"}}],[11,"spawn","","Create a future from a unique closure.",216,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"drop","std::sync::mutex","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",217,{"inputs":[{"name":"staticmutex"}],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",217,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",217,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates resources associated with this static mutex.",217,null],[11,"deref","","",218,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",218,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",218,null],[11,"new","std::sync::once","Creates a new `Once` value.",219,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",219,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock<T>` which is unlocked.",220,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",220,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",220,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",220,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",220,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",220,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"drop","","",220,null],[11,"fmt","","",220,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new rwlock.",221,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",221,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this lock with shared read access.",221,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",221,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",221,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates all resources associated with this static lock.",221,null],[11,"deref","","",222,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",223,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",223,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",222,null],[11,"drop","","",223,null],[11,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",224,{"inputs":[{"name":"semaphore"},{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",224,null],[11,"release","","Release a resource from this semaphore.",224,null],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",224,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",225,null],[11,"default","core::atomic","",226,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",227,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",228,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",229,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",230,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",226,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",226,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",226,null],[11,"swap","","Stores a value into the bool, returning the old value.",226,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the bool if the current value is the same as the expected value.",226,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",226,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",226,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",226,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",226,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",227,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",227,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",227,null],[11,"swap","","Stores a value into the isize, returning the old value.",227,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the isize if the current value is the same as the expected value.",227,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",227,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",227,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",227,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",227,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",227,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",228,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",228,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",228,null],[11,"swap","","Stores a value into the usize, returning the old value.",228,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the usize if the current value is the same as the expected value.",228,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",228,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",228,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",228,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",228,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",228,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",229,null],[11,"load","","Loads a value from the pointer.",229,null],[11,"store","","Stores a value into the pointer.",229,null],[11,"swap","","Stores a value into the pointer, returning the old value.",229,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the expected value.",229,null],[11,"fmt","std::time::duration","",231,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",231,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",231,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",231,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",231,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",231,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",231,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",231,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",231,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Crates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",231,{"inputs":[{"name":"duration"},{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",231,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",231,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",231,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"secs","","Returns the number of whole seconds represented by this duration.",231,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[11,"extra_nanos","","Returns the nanosecond precision represented by this duration.",231,{"inputs":[{"name":"duration"}],"output":{"name":"u32"}}],[11,"add","","",231,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",231,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",231,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div","","",231,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"fmt","","",231,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::condvar","Creates a new condition variable for use.",232,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","Signals one waiter on this condition variable to wake up.",232,null],[11,"notify_all","","Awakens all current waiters on this condition variable.",232,null],[11,"wait","","Waits for a signal on the specified mutex.",232,null],[11,"wait_timeout","","Waits for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",232,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","Deallocates all resources associated with this condition variable.",232,null],[11,"new","std::sys_common::mutex","Creates a new mutex for use.",233,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","Locks the mutex blocking the current thread until it is available.",233,null],[11,"try_lock","","Attempts to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",233,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","Unlocks the mutex.",233,null],[11,"destroy","","Deallocates all resources associated with this mutex.",233,null],[11,"next","std::sys_common::net","",234,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"drop","","",234,null],[11,"connect","","",235,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",235,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"set_nodelay","","",235,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",235,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",235,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",235,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",235,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","",235,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",235,null],[11,"write","","",235,null],[11,"peer_addr","","",235,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","",235,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",235,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"duplicate","","",235,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",235,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",236,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",236,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"socket_addr","","",236,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",236,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"duplicate","","",236,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"fmt","","",236,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",237,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",237,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"socket_addr","","",237,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",237,null],[11,"send_to","","",237,null],[11,"set_broadcast","","",237,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",237,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","",237,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",237,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"multicast_time_to_live","","",237,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"time_to_live","","",237,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"duplicate","","",237,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",237,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",237,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",237,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","",237,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",237,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::poison","",238,{"inputs":[{"name":"flag"}],"output":{"name":"flag"}}],[11,"borrow","","",238,{"inputs":[{"name":"flag"}],"output":{"name":"result"}}],[11,"done","","",238,null],[11,"get","","",238,{"inputs":[{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","","",239,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",239,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",239,{"inputs":[{"name":"poisonerror"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",239,{"inputs":[{"name":"poisonerror"},{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",239,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",239,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",239,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"from","","",240,{"inputs":[{"name":"trylockerror"},{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",240,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",240,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",240,{"inputs":[{"name":"trylockerror"}],"output":{"name":"str"}}],[11,"cause","","",240,{"inputs":[{"name":"trylockerror"}],"output":{"name":"option"}}],[11,"new","std::sys_common::remutex","Creates a new reentrant mutex in an unlocked state.",241,{"inputs":[{"name":"reentrantmutex"},{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",241,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",241,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"drop","","",241,null],[11,"fmt","","",241,{"inputs":[{"name":"reentrantmutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",242,{"inputs":[{"name":"reentrantmutexguard"}],"output":{"name":"t"}}],[11,"drop","","",242,null],[11,"new","std::sys_common::rwlock","Creates a new reader-writer lock for use.",243,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","Acquires shared access to the underlying lock, blocking the current\nthread to do so.",243,null],[11,"try_read","","Attempts to acquire shared access to this lock, returning whether it\nsucceeded or not.",243,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","Acquires write access to the underlying lock, blocking the current thread\nto do so.",243,null],[11,"try_write","","Attempts to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",243,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","Unlocks previously acquired shared access to this lock.",243,null],[11,"write_unlock","","Unlocks previously acquired exclusive access to this lock.",243,null],[11,"destroy","","Destroys OS-related resources with this RWLock.",243,null],[11,"new","std::sys_common::thread_local","",244,{"inputs":[{"name":"statickey"},{"name":"option"}],"output":{"name":"statickey"}}],[11,"get","","Gets the value associated with this TLS key",244,null],[11,"set","","Sets this TLS key to a new value.",244,null],[11,"destroy","","Deallocates this OS TLS key.",244,null],[11,"new","","Creates a new managed OS TLS key.",245,{"inputs":[{"name":"key"},{"name":"option"}],"output":{"name":"key"}}],[11,"get","","See StaticKey::get",245,null],[11,"set","","See StaticKey::set",245,null],[11,"drop","","",245,null],[11,"clone","std::sys_common::wtf8","",246,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"partial_cmp","","",246,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",246,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",246,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",246,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",246,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",246,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"eq","","",246,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",246,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",246,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u32_unchecked","","Unsafely creates a new `CodePoint` without checking the value.",246,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"codepoint"}}],[11,"from_u32","","Creates a new `CodePoint` if the value is a valid code point.",246,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_char","","Creates a new `CodePoint` from a `char`.",246,{"inputs":[{"name":"codepoint"},{"name":"char"}],"output":{"name":"codepoint"}}],[11,"to_u32","","Returns the numeric value of the code point.",246,{"inputs":[{"name":"codepoint"}],"output":{"name":"u32"}}],[11,"to_char","","Optionally returns a Unicode scalar value for the code point.",246,{"inputs":[{"name":"codepoint"}],"output":{"name":"option"}}],[11,"to_char_lossy","","Returns a Unicode scalar value for the code point.",246,{"inputs":[{"name":"codepoint"}],"output":{"name":"char"}}],[11,"clone","","",247,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"partial_cmp","","",247,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"option"}}],[11,"lt","","",247,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"le","","",247,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"gt","","",247,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ge","","",247,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"cmp","","",247,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"ordering"}}],[11,"eq","","",247,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ne","","",247,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"from_str","","Creates a WTF-8 slice from a UTF-8 `&str` slice.",248,{"inputs":[{"name":"wtf8"},{"name":"str"}],"output":{"name":"wtf8"}}],[11,"len","","Returns the length, in WTF-8 bytes.",248,{"inputs":[{"name":"wtf8"}],"output":{"name":"usize"}}],[11,"ascii_byte_at","","Returns the code point at `position` if it is in the ASCII range,\nor `b'\\xFF' otherwise.",248,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"code_points","","Returns an iterator for the string’s code points.",248,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8codepoints"}}],[11,"as_str","","Tries to convert the string to UTF-8 and return a `&str` slice.",248,{"inputs":[{"name":"wtf8"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Lossily converts the string to UTF-8.\nReturns a UTF-8 `&str` slice if the contents are well-formed in UTF-8.",248,{"inputs":[{"name":"wtf8"}],"output":{"name":"cow"}}],[11,"encode_wide","","Converts the WTF-8 string to potentially ill-formed UTF-16\nand return an iterator of 16-bit code units.",248,{"inputs":[{"name":"wtf8"}],"output":{"name":"encodewide"}}],[11,"deref","","",247,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"fmt","","",247,{"inputs":[{"name":"wtf8buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an new, empty WTF-8 string.",247,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"with_capacity","","Creates an new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",247,{"inputs":[{"name":"wtf8buf"},{"name":"usize"}],"output":{"name":"wtf8buf"}}],[11,"from_string","","Creates a WTF-8 string from a UTF-8 `String`.",247,{"inputs":[{"name":"wtf8buf"},{"name":"string"}],"output":{"name":"wtf8buf"}}],[11,"from_str","","Creates a WTF-8 string from a UTF-8 `&str` slice.",247,{"inputs":[{"name":"wtf8buf"},{"name":"str"}],"output":{"name":"wtf8buf"}}],[11,"from_wide","","Creates a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",247,null],[11,"as_slice","","",247,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",247,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",247,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"usize"}}],[11,"push_str","","Append a UTF-8 slice at the end of the string.",247,null],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",247,null],[11,"push_char","","Append a Unicode scalar value at the end of the string.",247,null],[11,"push","","Append a code point at the end of the string.",247,null],[11,"truncate","","Shortens a string to the specified length.",247,null],[11,"into_string","","Consumes the WTF-8 string and tries to convert it to UTF-8.",247,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"result"}}],[11,"into_string_lossy","","Consumes the WTF-8 string and converts it lossily to UTF-8.",247,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"string"}}],[11,"from_iter","","",247,{"inputs":[{"name":"wtf8buf"},{"name":"t"}],"output":{"name":"wtf8buf"}}],[11,"extend","","",247,null],[11,"eq","","",248,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",248,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"option"}}],[11,"lt","","",248,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"le","","",248,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"gt","","",248,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ge","","",248,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"cmp","","",248,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"ordering"}}],[11,"fmt","","",248,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",248,{"inputs":[{"name":"wtf8"},{"name":"range"}],"output":{"name":"wtf8"}}],[11,"index","","",248,{"inputs":[{"name":"wtf8"},{"name":"rangefrom"}],"output":{"name":"wtf8"}}],[11,"index","","",248,{"inputs":[{"name":"wtf8"},{"name":"rangeto"}],"output":{"name":"wtf8"}}],[11,"index","","",248,{"inputs":[{"name":"wtf8"},{"name":"rangefull"}],"output":{"name":"wtf8"}}],[11,"clone","","",249,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"wtf8codepoints"}}],[11,"next","","",249,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"option"}}],[11,"size_hint","","",249,null],[11,"clone","","",250,{"inputs":[{"name":"encodewide"}],"output":{"name":"encodewide"}}],[11,"next","","",250,{"inputs":[{"name":"encodewide"}],"output":{"name":"option"}}],[11,"size_hint","","",250,null],[11,"hash","","",246,null],[11,"hash","","",247,null],[11,"hash","","",248,null],[11,"is_ascii","","",248,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",248,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"to_ascii_lowercase","","",248,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"eq_ignore_ascii_case","","",248,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",248,null],[11,"make_ascii_lowercase","","",248,null],[11,"new","std::sys::condvar","",251,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","",251,null],[11,"notify_all","","",251,null],[11,"wait","","",251,null],[11,"wait_timeout","","",251,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","",251,null],[11,"new","std::sys::fd","",252,{"inputs":[{"name":"filedesc"},{"name":"i32"}],"output":{"name":"filedesc"}}],[11,"raw","","",252,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"into_raw","","Extracts the actual filedescriptor without closing it.",252,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"read","","",252,null],[11,"write","","",252,null],[11,"set_cloexec","","",252,null],[11,"drop","","",252,null],[11,"clone","std::sys::fs","",253,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",254,{"inputs":[{"name":"filepermissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",254,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"ne","","",254,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"clone","","",254,{"inputs":[{"name":"filepermissions"}],"output":{"name":"filepermissions"}}],[11,"hash","","",255,null],[11,"eq","","",255,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",255,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",255,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"size","","",256,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"perm","","",256,{"inputs":[{"name":"fileattr"}],"output":{"name":"filepermissions"}}],[11,"file_type","","",256,{"inputs":[{"name":"fileattr"}],"output":{"name":"filetype"}}],[11,"as_raw_stat","std::fs","",120,{"inputs":[{"name":"metadata"}],"output":{"name":"stat"}}],[11,"readonly","std::sys::fs","",254,{"inputs":[{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","",254,null],[11,"mode","","",254,{"inputs":[{"name":"filepermissions"}],"output":{"name":"u32"}}],[11,"is_dir","","",255,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","",255,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","",255,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"next","","",257,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"drop","","",258,null],[11,"path","","",259,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"file_name","","",259,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"metadata","","",259,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","",259,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"ino","","",259,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"new","","",253,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","",253,null],[11,"write","","",253,null],[11,"append","","",253,null],[11,"truncate","","",253,null],[11,"create","","",253,null],[11,"mode","","",253,null],[11,"open","","",260,{"inputs":[{"name":"file"},{"name":"path"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"open_c","","",260,{"inputs":[{"name":"file"},{"name":"cstr"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"file_attr","","",260,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fsync","","",260,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","",260,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","",260,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"read","","",260,null],[11,"write","","",260,null],[11,"flush","","",260,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",260,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fd","","",260,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"new","","",261,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"mkdir","","",261,{"inputs":[{"name":"dirbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"set_mode","","",261,null],[11,"fmt","","",260,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::mutex","",262,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","",262,null],[11,"unlock","","",262,null],[11,"try_lock","","",262,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"destroy","","",262,null],[11,"uninitialized","","",263,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"reentrantmutex"}}],[11,"init","","",263,null],[11,"lock","","",263,null],[11,"try_lock","","",263,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"bool"}}],[11,"unlock","","",263,null],[11,"destroy","","",263,null],[11,"new","std::sys::net","",264,{"inputs":[{"name":"socket"},{"name":"socketaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","",264,null],[11,"duplicate","","",264,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"read","","",264,null],[11,"set_timeout","","",264,{"inputs":[{"name":"socket"},{"name":"option"},{"name":"i32"}],"output":{"name":"result"}}],[11,"timeout","","",264,{"inputs":[{"name":"socket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"next","std::sys::os","",265,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",265,null],[11,"fmt","","",266,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",266,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",266,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",267,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",267,null],[11,"len","","",267,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",268,{"inputs":[{"name":"env"}],"output":{"name":"option"}}],[11,"size_hint","","",268,null],[11,"hash","std::sys::os_str","",269,null],[11,"clone","","",269,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"fmt","","",270,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",269,{"inputs":[{"name":"buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","",269,{"inputs":[{"name":"buf"},{"name":"string"}],"output":{"name":"buf"}}],[11,"as_slice","","",269,{"inputs":[{"name":"buf"}],"output":{"name":"slice"}}],[11,"into_string","","",269,{"inputs":[{"name":"buf"}],"output":{"name":"result"}}],[11,"push_slice","","",269,null],[11,"from_str","","",270,{"inputs":[{"name":"slice"},{"name":"str"}],"output":{"name":"slice"}}],[11,"to_str","","",270,{"inputs":[{"name":"slice"}],"output":{"name":"option"}}],[11,"to_string_lossy","","",270,{"inputs":[{"name":"slice"}],"output":{"name":"cow"}}],[11,"to_owned","","",270,{"inputs":[{"name":"slice"}],"output":{"name":"buf"}}],[11,"from_fd","std::sys::pipe","",271,{"inputs":[{"name":"anonpipe"},{"name":"i32"}],"output":{"name":"anonpipe"}}],[11,"read","","",271,null],[11,"write","","",271,null],[11,"raw","","",271,{"inputs":[{"name":"anonpipe"}],"output":{"name":"i32"}}],[11,"fd","","",271,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"clone","std::sys::process","",272,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"new","","",272,{"inputs":[{"name":"command"},{"name":"osstr"}],"output":{"name":"command"}}],[11,"arg","","",272,null],[11,"args","","",272,null],[11,"env","","",272,null],[11,"env_remove","","",272,null],[11,"env_clear","","",272,null],[11,"cwd","","",272,null],[11,"fmt","","",273,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",273,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",273,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",273,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","",273,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",273,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",273,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","",274,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"spawn","","",274,{"inputs":[{"name":"process"},{"name":"command"},{"name":"stdio"},{"name":"stdio"},{"name":"stdio"}],"output":{"name":"result"}}],[11,"id","","",274,{"inputs":[{"name":"process"}],"output":{"name":"u32"}}],[11,"wait","","",274,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"try_wait","","",274,{"inputs":[{"name":"process"}],"output":{"name":"option"}}],[11,"new","std::sys::rwlock","",275,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","",275,null],[11,"try_read","","",275,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","",275,null],[11,"try_write","","",275,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","",275,null],[11,"write_unlock","","",275,null],[11,"destroy","","",275,null],[11,"new","std::sys::stack_overflow","",276,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"drop","","",276,null],[11,"new","std::sys::thread","",277,{"inputs":[{"name":"thread"},{"name":"usize"},{"name":"box"}],"output":{"name":"result"}}],[11,"yield_now","","",277,null],[11,"set_name","","",277,null],[11,"sleep","","",277,null],[11,"join","","",277,null],[11,"drop","","",277,null],[11,"now","std::sys::time::inner","",278,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"new","std::sys::stdio","",279,{"inputs":[{"name":"stdin"}],"output":{"name":"result"}}],[11,"read","","",279,null],[11,"new","","",280,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write","","",280,null],[11,"new","","",281,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write","","",281,null],[11,"write","","",281,null],[11,"flush","","",281,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"clone","std::rt::libunwind","",282,{"inputs":[{"name":"_unwind_action"}],"output":{"name":"_unwind_action"}}],[11,"new","std::rand::os::imp","Create a new `OsRng`.",283,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",283,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",283,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",283,null],[11,"new","std::rand::reader","Create a new `ReaderRng` from a `Read`.",284,{"inputs":[{"name":"readerrng"},{"name":"r"}],"output":{"name":"readerrng"}}],[11,"next_u32","","",284,{"inputs":[{"name":"readerrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",284,{"inputs":[{"name":"readerrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",284,null],[11,"clone","std::rand","",285,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",285,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",285,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",285,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",285,null],[11,"from_seed","","",285,null],[11,"reseed","","",286,null],[11,"clone","","",287,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",287,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",287,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",287,null],[11,"fmt","openssl","",288,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",288,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",288,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",288,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",288,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",288,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",288,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",288,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",289,null],[11,"fmt","","",289,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",289,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",289,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",289,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",289,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"next","rustc_unicode::char","",290,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",291,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"next","","",292,{"inputs":[{"name":"totitlecase"}],"output":{"name":"option"}}],[11,"next","","",293,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"fmt","core::cmp","",294,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",294,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",294,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",294,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",294,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",294,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",294,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"borrow","alloc::boxed","",21,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",21,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow","alloc::rc","",295,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","alloc::arc","",296,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",297,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",297,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",297,null],[11,"into_owned","","Extracts the owned data.",297,null],[11,"deref","","",297,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",297,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",297,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",297,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",297,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",297,null],[11,"into_cow","","",297,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",297,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"cmp","core::marker","",298,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",298,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"option"}}],[11,"lt","","",298,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"le","","",298,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"gt","","",298,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"ge","","",298,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"eq","","",298,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"ne","","",298,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"clone","","",298,{"inputs":[{"name":"nocopy"}],"output":{"name":"nocopy"}}],[11,"hash","","",299,null],[11,"eq","","",299,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",299,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",299,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",299,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",300,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",300,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",300,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",300,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",300,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",300,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",300,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",301,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",301,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",301,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",301,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",302,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",302,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",302,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",302,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",302,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",302,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",302,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",302,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",302,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",303,null],[11,"clone","","",303,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",304,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",304,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",304,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for a optional component of the borrowed data, e.g. an\nenum variant.",304,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",305,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for a optional component of the borrowed data, e.g.\nan enum variant.",305,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",306,null],[11,"deref","","",305,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",305,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",307,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",307,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",307,null],[11,"clone","core::fmt::rt::v1","",308,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",309,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",310,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",310,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",310,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",311,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",312,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"hash","core::option","",313,null],[11,"fmt","","",313,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",313,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",313,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",313,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",313,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",313,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",313,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",313,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",313,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",313,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",313,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",313,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",313,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",313,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",313,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",313,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",313,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",313,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",313,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",313,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",313,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",313,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",313,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",313,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",313,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",313,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",313,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",313,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",313,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",313,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",313,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",313,null],[11,"cloned","","Maps an Option<&T> to an Option<T> by cloning the contents of the Option.",313,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",313,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",313,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",313,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",314,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",314,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",314,null],[11,"next_back","","",314,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",315,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",315,null],[11,"next_back","","",315,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",315,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",316,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",316,null],[11,"next_back","","",316,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",317,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",317,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",317,null],[11,"next_back","","",317,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",313,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","collections::slice","",318,{"inputs":[{"name":"elementswaps"}],"output":{"name":"elementswaps"}}],[11,"new","","Creates an `ElementSwaps` iterator for a sequence of `length` elements.",318,{"inputs":[{"name":"elementswaps"},{"name":"usize"}],"output":{"name":"elementswaps"}}],[11,"borrow","collections::vec","",30,null],[11,"borrow_mut","","",30,null],[11,"clone","collections::slice","",319,{"inputs":[{"name":"direction"}],"output":{"name":"direction"}}],[11,"clone","","",320,{"inputs":[{"name":"sizedirection"}],"output":{"name":"sizedirection"}}],[11,"next","","",318,{"inputs":[{"name":"elementswaps"}],"output":{"name":"option"}}],[11,"size_hint","","",318,null],[11,"next","","",321,{"inputs":[{"name":"permutations"}],"output":{"name":"option"}}],[11,"size_hint","","",321,null],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",30,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",30,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",30,null],[11,"from_raw_buf","","Creates a vector by copying the elements from a raw pointer.",30,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",30,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",30,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",30,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",30,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",30,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector, dropping excess elements.",30,null],[11,"as_slice","","Extracts a slice containing the entire vector.",30,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",30,null],[11,"set_len","","Sets the length of a vector.",30,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",30,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",30,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",30,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",30,null],[11,"push","","Appends an element to the back of a collection.",30,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it is empty.",30,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",30,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",30,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",30,null],[11,"len","","Returns the number of elements in the vector.",30,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",30,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"map_in_place","","Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same\nsize and in case they are not zero-sized the same minimal alignment.",30,{"inputs":[{"name":"vec"},{"name":"f"}],"output":{"name":"vec"}}],[11,"split_off","","Splits the collection into two at the given index.",30,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",30,null],[11,"push_all","","Appends all elements in a slice to the `Vec`.",30,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",30,null],[11,"clone","","",30,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",30,null],[11,"hash","","",30,null],[11,"index","","",30,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",30,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",30,null],[11,"index","","",30,null],[11,"index","","",30,null],[11,"index","","",30,null],[11,"index_mut","","",30,null],[11,"index_mut","","",30,null],[11,"index_mut","","",30,null],[11,"index_mut","","",30,null],[11,"deref","","",30,null],[11,"deref_mut","","",30,null],[11,"from_iter","","",30,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",30,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",30,null],[11,"extend","","",30,null],[11,"eq","","",30,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","collections::borrow","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,null],[11,"ne","","",297,null],[11,"eq","","",297,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",297,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"partial_cmp","","",30,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",30,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",30,null],[11,"default","","",30,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",30,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",30,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",30,null],[11,"from","","",30,null],[11,"from","","",30,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",297,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",30,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"into_inner","","Drops all items that have not yet been moved and returns the empty vector.",322,{"inputs":[{"name":"intoiter"}],"output":{"name":"vec"}}],[11,"next","","",322,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",322,null],[11,"count","","",322,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",322,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",322,null],[11,"next","","",323,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",323,null],[11,"next_back","","",323,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",323,null],[11,"index","collections::bit","",324,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"new","","Creates an empty `BitVec`.",324,{"inputs":[{"name":"bitvec"}],"output":{"name":"bitvec"}}],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element\nto `bit`.",324,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"bool"}],"output":{"name":"bitvec"}}],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",324,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bitvec"}}],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0.",324,null],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index\nis `f(index)`.",324,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"f"}],"output":{"name":"bitvec"}}],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",324,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set","","Sets the value of a bit at an index `i`.",324,null],[11,"set_all","","Sets all bits to 1.",324,null],[11,"negate","","Flips all bits.",324,null],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",324,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",324,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"difference","","Calculates the difference between two bitvectors.",324,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"all","","Returns `true` if all bits are 1.",324,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the elements of the vector in order.",324,{"inputs":[{"name":"bitvec"}],"output":{"name":"iter"}}],[11,"append","","Moves all bits from `other` into `Self`, leaving `other` empty.",324,null],[11,"split_off","","Splits the `BitVec` into two at the given bit,\nretaining the first half in-place and returning the second one.",324,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bitvec"}}],[11,"none","","Returns `true` if all bits are 0.",324,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"any","","Returns `true` if any bit is 1.",324,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`BitVec` becomes the high-order bit of the first byte. If the\nsize of the `BitVec` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",324,{"inputs":[{"name":"bitvec"}],"output":{"name":"vec"}}],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s.\nBoth the `BitVec` and slice must have the same length.",324,null],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",324,null],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given\n`BitVec`. The collection may reserve more space to avoid frequent reallocations.",324,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the\ngiven `BitVec`. Does nothing if the capacity is already sufficient.",324,null],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",324,{"inputs":[{"name":"bitvec"}],"output":{"name":"usize"}}],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",324,null],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",324,{"inputs":[{"name":"bitvec"}],"output":{"name":"option"}}],[11,"push","","Pushes a `bool` onto the end.",324,null],[11,"len","","Returns the total number of bits in this vector",324,{"inputs":[{"name":"bitvec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if there are no bits in this vector",324,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this vector.",324,null],[11,"default","","",324,{"inputs":[{"name":"bitvec"}],"output":{"name":"bitvec"}}],[11,"from_iter","","",324,{"inputs":[{"name":"bitvec"},{"name":"i"}],"output":{"name":"bitvec"}}],[11,"extend","","",324,null],[11,"extend","","",324,null],[11,"clone","","",324,{"inputs":[{"name":"bitvec"}],"output":{"name":"bitvec"}}],[11,"clone_from","","",324,null],[11,"partial_cmp","","",324,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"option"}}],[11,"cmp","","",324,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"ordering"}}],[11,"fmt","","",324,{"inputs":[{"name":"bitvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",324,null],[11,"eq","","",324,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"clone","","",325,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",325,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",325,null],[11,"next_back","","",325,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"indexable","","",325,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"idx","","",325,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",326,{"inputs":[{"name":"bitset"}],"output":{"name":"bitset"}}],[11,"default","","",326,{"inputs":[{"name":"bitset"}],"output":{"name":"bitset"}}],[11,"from_iter","","",326,{"inputs":[{"name":"bitset"},{"name":"i"}],"output":{"name":"bitset"}}],[11,"extend","","",326,null],[11,"extend","","",326,null],[11,"partial_cmp","","",326,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"option"}}],[11,"cmp","","",326,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"ordering"}}],[11,"eq","","",326,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty `BitSet`.",326,{"inputs":[{"name":"bitset"}],"output":{"name":"bitset"}}],[11,"with_capacity","","Creates a new `BitSet` with initially no contents, able to\nhold `nbits` elements without resizing.",326,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bitset"}}],[11,"from_bit_vec","","Creates a new `BitSet` from the given bit vector.",326,{"inputs":[{"name":"bitset"},{"name":"bitvec"}],"output":{"name":"bitset"}}],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",326,{"inputs":[{"name":"bitset"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `BitSet` to contain `len` distinct\nelements. In the case of `BitSet` this means reallocations will not\noccur as long as all inserted elements are less than `len`.",326,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitSet` to contain `len`\ndistinct elements.  In the case of `BitSet` this means reallocations\nwill not occur as long as all inserted elements are less than `len`.",326,null],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",326,{"inputs":[{"name":"bitset"}],"output":{"name":"bitvec"}}],[11,"get_ref","","Returns a reference to the underlying bit vector.",326,{"inputs":[{"name":"bitset"}],"output":{"name":"bitvec"}}],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",326,null],[11,"iter","","Iterator over each usize stored in the `BitSet`.",326,{"inputs":[{"name":"bitset"}],"output":{"name":"setiter"}}],[11,"union","","Iterator over each usize stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",326,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"union"}}],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place\nversion.",326,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"intersection"}}],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place\nversion.",326,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Iterator over each usize stored in the symmetric difference of `self`\nand `other`.  See\n[symmetric_difference_with](#method.symmetric_difference_with) for an\nefficient in-place version.",326,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"symmetricdifference"}}],[11,"union_with","","Unions in-place with the specified other bit vector.",326,null],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",326,null],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector\nin-place.",326,null],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other\nbit vector in-place.",326,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",326,null],[11,"split_off","","Splits the `BitSet` into two at the given key including the key.\nRetains the first part in-place while returning the second part.",326,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bitset"}}],[11,"len","","Returns the number of set bits in this set.",326,{"inputs":[{"name":"bitset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether there are no bits set in this set",326,{"inputs":[{"name":"bitset"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this set",326,null],[11,"contains","","Returns `true` if this set contains the specified integer.",326,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",326,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",326,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",326,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",326,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",326,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","","",326,{"inputs":[{"name":"bitset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",326,null],[11,"clone","","",327,{"inputs":[{"name":"blockiter"}],"output":{"name":"blockiter"}}],[11,"clone","","",328,{"inputs":[{"name":"twobitpositions"}],"output":{"name":"twobitpositions"}}],[11,"clone","","",329,{"inputs":[{"name":"setiter"}],"output":{"name":"setiter"}}],[11,"clone","","",330,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"clone","","",331,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"clone","","",332,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"clone","","",333,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",327,{"inputs":[{"name":"blockiter"}],"output":{"name":"option"}}],[11,"size_hint","","",327,null],[11,"next","","",328,{"inputs":[{"name":"twobitpositions"}],"output":{"name":"option"}}],[11,"size_hint","","",328,null],[11,"next","","",329,{"inputs":[{"name":"setiter"}],"output":{"name":"option"}}],[11,"size_hint","","",329,null],[11,"next","","",330,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",330,null],[11,"next","","",331,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",331,null],[11,"next","","",332,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",332,null],[11,"next","","",333,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",333,null],[11,"next","collections::btree::node","",334,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"next_back","","",334,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"drop","","",334,null],[11,"drop","","",335,null],[11,"as_slices","","",335,null],[11,"as_slices_mut","","",335,null],[11,"as_slices_internal","","",335,{"inputs":[{"name":"node"}],"output":{"name":"nodeslice"}}],[11,"as_slices_internal_mut","","",335,{"inputs":[{"name":"node"}],"output":{"name":"mutnodeslice"}}],[11,"keys","","",335,null],[11,"keys_mut","","",335,null],[11,"vals","","",335,null],[11,"vals_mut","","",335,null],[11,"edges","","",335,null],[11,"edges_mut","","",335,null],[11,"clone","","",335,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[11,"clone","","",336,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"search","","Searches for the given key in the node. If it finds an exact match,\n`Found` will be yielded with the matching index. If it doesn't find an exact match,\n`GoDown` will be yielded with the index of the subtree the key must lie in.",335,{"inputs":[{"name":"node"},{"name":"noderef"},{"name":"q"}],"output":{"name":"searchresult"}}],[11,"make_leaf_root","","Make a leaf root from scratch",335,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"node"}}],[11,"make_internal_root","","Make an internal root and swap it with an old root",335,null],[11,"len","","How many key-value pairs the node contains",335,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_empty","","Does the node not contain any key-value pairs",335,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"capacity","","How many key-value pairs the node can fit",335,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_leaf","","If the node has any children",335,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_underfull","","if the node has too few elements",335,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_full","","if the node cannot fit any more elements",335,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"node","","Returns a reference to the node that contains the pointed-to edge or key/value pair. This\nis very different from `edge` and `edge_mut` because those return children of the node\nreturned by `node`.",336,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"as_raw","","Converts a handle into one that stores the same information using a raw pointer. This can\nbe useful in conjunction with `from_raw` when the type system is insufficient for\ndetermining the lifetimes of the nodes.",336,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a reference. This is an unsafe inverse of `as_raw`, and together they allow\nunsafely extending the lifetime of the reference to the `Node`.",336,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw_mut","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a mutable reference. This is an unsafe inverse of `as_raw`, and together they\nallow unsafely extending the lifetime of the reference to the `Node`.",336,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_edge","","Turns the handle into a reference to the edge it points at. This is necessary because the\nreturned pointer has a larger lifetime than what would be returned by `edge` or `edge_mut`,\nmaking it more suitable for moving down a chain of nodes.",336,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"into_edge_mut","","Turns the handle into a mutable reference to the edge it points at. This is necessary\nbecause the returned pointer has a larger lifetime than what would be returned by\n`edge_mut`, making it more suitable for moving down a chain of nodes.",336,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"force","","Figure out whether this handle is pointing to something in a leaf node or to something in\nan internal node, clarifying the type according to the result.",336,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"insert_as_leaf","","Tries to insert this key-value pair at the given index in this leaf node\nIf the node is full, we have to split it.",336,null],[11,"edge_mut","","Returns a mutable reference to the edge pointed-to by this handle. This should not be\nconfused with `node`, which references the parent node of what is returned here.",336,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"insert_as_internal","","Tries to insert this key-value pair at the given index in this internal node\nIf the node is full, we have to split it.",336,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"node"}],"output":{"name":"insertionresult"}}],[11,"handle_underflow","","Handle an underflow in this node's child. We favour handling \"to the left\" because we know\nwe're empty, but our neighbour can be full. Handling to the left means when we choose to\nsteal, we pop off the end of our neighbour (always fast) and \"unshift\" ourselves\n(always slow, but at least faster since we know we're half-empty).\nHandling \"to the right\" reverses these roles. Of course, we merge whenever possible\nbecause we want dense nodes, and merging is about equal work regardless of direction.",336,null],[11,"into_kv","","Turns the handle into references to the key and value it points at. This is necessary\nbecause the returned pointers have larger lifetimes than what would be returned by `key`\nor `val`.",336,null],[11,"into_kv_mut","","Turns the handle into mutable references to the key and value it points at. This is\nnecessary because the returned pointers have larger lifetimes than what would be returned\nby `key_mut` or `val_mut`.",336,null],[11,"into_left_edge","","Convert this handle into one pointing at the edge immediately to the left of the key/value\npair pointed-to by this handle. This is useful because it returns a reference with larger\nlifetime than `left_edge`.",336,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"key_mut","","Returns a mutable reference to the key pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",336,{"inputs":[{"name":"handle"}],"output":{"name":"k"}}],[11,"val_mut","","Returns a mutable reference to the value pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",336,{"inputs":[{"name":"handle"}],"output":{"name":"v"}}],[11,"left_edge","","Gets the handle pointing to the edge immediately to the left of the key/value pair pointed\nto by this handle.",336,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","Gets the handle pointing to the edge immediately to the right of the key/value pair pointed\nto by this handle.",336,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"remove_as_leaf","","Removes the key/value pair at the handle's location.",336,null],[11,"kv_handle","","Returns the mutable handle pointing to the key/value pair at a given index.",335,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"iter","","",335,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"iter_mut","","",335,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"into_iter","","",335,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"hoist_lone_child","","When a node has no keys or values and only a single edge, extract that edge.",335,null],[11,"clone","","",337,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"elemsandedges"}}],[11,"next_kv","","",337,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv_back","","",337,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge","","",337,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge_back","","",337,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv","","",338,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_kv_back","","",338,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge","","",338,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge_back","","",338,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"drop","","",338,null],[11,"clone","","",339,{"inputs":[{"name":"abstraversal"}],"output":{"name":"abstraversal"}}],[11,"next","","",339,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_back","","",339,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the first item is not an edge.",339,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item_back","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the last item is not an edge.",339,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the first item is not a key-value pair.",339,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item_back","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the last item is not a key-value pair.",339,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",340,{"inputs":[{"name":"nodeslice"},{"name":"k"}],"output":{"name":"nodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",340,{"inputs":[{"name":"nodeslice"},{"name":"k"}],"output":{"name":"nodeslice"}}],[11,"iter","","Returns an iterator over key/value pairs and edges in a slice.",340,{"inputs":[{"name":"nodeslice"}],"output":{"name":"abstraversal"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",341,{"inputs":[{"name":"mutnodeslice"},{"name":"k"}],"output":{"name":"mutnodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",341,{"inputs":[{"name":"mutnodeslice"},{"name":"k"}],"output":{"name":"mutnodeslice"}}],[11,"iter_mut","","Returns an iterator over key/value pairs and edges in a slice.",341,{"inputs":[{"name":"mutnodeslice"}],"output":{"name":"abstraversal"}}],[11,"clone","collections::btree::map","",342,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clone","","",343,{"inputs":[{"name":"absiter"}],"output":{"name":"absiter"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",342,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"with_b","","Makes a new empty BTreeMap with the given B.",342,{"inputs":[{"name":"btreemap"},{"name":"usize"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",342,null],[11,"get","","Returns a reference to the value corresponding to the key.",342,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",342,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",342,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",342,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",342,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"into_iter","","Gets an owning iterator over the entries of the map.",342,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"deref","collections::btree::map::stack","",344,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"deref_mut","","",344,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"new","","Creates a new PartialSearchStack from a BTreeMap by initializing the stack with the\nroot of the tree.",345,{"inputs":[{"name":"partialsearchstack"},{"name":"btreemap"}],"output":{"name":"partialsearchstack"}}],[11,"with","","Breaks up the stack into a `Pusher` and the next `Node`, allowing the given closure\nto interact with, search, and finally push the `Node` onto the stack. The passed in\nclosure must be polymorphic on the `'id` lifetime parameter, as this statically\nensures that only `Handle`s from the correct `Node` can be pushed.",345,{"inputs":[{"name":"partialsearchstack"},{"name":"f"}],"output":{"name":"t"}}],[11,"push","","Pushes the requested child of the stack's current top on top of the stack. If the child\nexists, then a new PartialSearchStack is yielded. Otherwise, a VacantSearchStack is\nyielded.",346,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"partialsearchstack"}}],[11,"seal","","Converts the PartialSearchStack into a SearchStack.",346,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"searchstack"}}],[11,"peek","","Gets a reference to the value the stack points to.",347,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"peek_mut","","Gets a mutable reference to the value the stack points to.",347,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"into_top","","Converts the stack into a mutable reference to the value it points to, with a lifetime\ntied to the original tree.",347,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"remove","","Removes the key and value in the top element of the stack, then handles underflows as\ndescribed in BTree's pop function.",347,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"insert","","Inserts the key and value into the top element in the stack, and if that node has to\nsplit recursively inserts the split contents into the next element stack until\nsplits stop.",347,{"inputs":[{"name":"searchstack"},{"name":"k"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","collections::btree::map","",342,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",342,null],[11,"extend","","",342,null],[11,"hash","","",342,null],[11,"default","","",342,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",342,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",342,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",342,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",342,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",342,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"traverse","collections::btree::node","",339,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",339,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",339,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"next","collections::btree::map","",343,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"size_hint","","",343,null],[11,"next_back","","",343,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"clone","","",348,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",348,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",348,null],[11,"next_back","","",348,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",349,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",349,null],[11,"next_back","","",349,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",350,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",350,null],[11,"next_back","","",350,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",351,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",351,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",351,null],[11,"next_back","","",351,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"clone","","",352,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",352,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",352,null],[11,"next_back","","",352,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"clone","","",353,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",353,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",353,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",354,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",354,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",355,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",355,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",355,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",356,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",357,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",357,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",357,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",357,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",357,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map.",342,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",342,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",342,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",342,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",342,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",342,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",342,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",342,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",342,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"partial_cmp","collections::btree::set","",358,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",358,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",358,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",358,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",358,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",358,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",358,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",358,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",358,null],[11,"clone","","",358,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",358,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"with_b","","Makes a new BTreeSet with the given B.",358,{"inputs":[{"name":"btreeset"},{"name":"usize"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet's contents.",358,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",358,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",358,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",358,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",358,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",358,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",358,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",358,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",358,null],[11,"contains","","Returns `true` if the set contains a value.",358,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",358,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",358,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",358,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",358,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",358,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"from_iter","","",358,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",358,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",358,null],[11,"extend","","",358,null],[11,"default","","",358,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"fmt","","",358,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",359,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",359,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",359,null],[11,"next_back","","",359,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",360,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",360,null],[11,"next_back","","",360,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",361,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",361,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",361,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",362,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",362,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"clone","","",363,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",363,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"clone","","",364,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",364,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"clone","","",365,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",365,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"hash","collections::enum_set","",366,null],[11,"cmp","","",366,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",366,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",366,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",366,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",366,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",366,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",366,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",366,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",366,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",366,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",366,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",366,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",366,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",366,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",366,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",366,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",366,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",366,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",366,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",366,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",366,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",366,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",366,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",366,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",366,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",366,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",366,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",367,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",367,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",367,null],[11,"from_iter","","",366,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",366,null],[11,"extend","","",366,null],[11,"start","core::ops","",368,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",369,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",370,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",370,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","collections::str","",371,{"inputs":[{"name":"decompositiontype"}],"output":{"name":"decompositiontype"}}],[11,"clone","","",372,{"inputs":[{"name":"decompositions"}],"output":{"name":"decompositions"}}],[11,"next","","",372,{"inputs":[{"name":"decompositions"}],"output":{"name":"option"}}],[11,"size_hint","","",372,null],[11,"clone","","",373,{"inputs":[{"name":"recompositionstate"}],"output":{"name":"recompositionstate"}}],[11,"clone","","",374,{"inputs":[{"name":"recompositions"}],"output":{"name":"recompositions"}}],[11,"next","","",374,{"inputs":[{"name":"recompositions"}],"output":{"name":"option"}}],[11,"clone","","",375,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",375,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",375,null],[11,"borrow","collections::string","",29,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",376,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",376,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",376,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",376,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",377,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",378,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",377,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",377,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",377,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",379,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"eq","","",380,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",380,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",380,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"haystack","","",379,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",379,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",379,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",381,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",381,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",381,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",381,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",381,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",381,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",381,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",381,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",382,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",382,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",382,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",382,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",382,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",382,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",382,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",382,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",383,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",383,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",383,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",383,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",383,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",383,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",383,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",383,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"cmp","collections::string","",29,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",26,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",29,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",29,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_str","","Creates a new string buffer from the given string.",29,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",29,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",29,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",29,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",29,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",29,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",29,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",29,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",29,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Pushes the given string onto this string buffer.",29,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",29,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",29,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",29,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",29,null],[11,"push","","Adds the given character to the end of the string.",29,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",29,null],[11,"truncate","","Shortens a string to the specified length.",29,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",29,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",29,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",29,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",29,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of bytes in this string.",29,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",29,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",29,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",29,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_bytes","","Consumes this error, returning the bytes that were attempted to make a\n`String` with.",26,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",26,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",26,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",29,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",29,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",29,null],[11,"extend","","",29,null],[11,"extend","","",29,null],[11,"eq","","",29,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",29,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",29,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",297,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",297,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",297,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",297,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",29,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",297,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",297,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","collections::string","",29,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",29,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",29,null],[11,"add","","",29,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",29,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",29,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",29,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",29,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",29,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref","","",384,{"inputs":[{"name":"derefstring"}],"output":{"name":"string"}}],[11,"eq","","",385,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",385,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",385,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",385,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"from_str","","",29,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"as_ref","","",29,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",29,null],[11,"from","","",29,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",297,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",297,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",29,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",29,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",29,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",29,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",386,null],[11,"next","","",386,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",386,null],[11,"next_back","","",386,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","collections::vec","",387,null],[11,"drop","","",388,null],[11,"drop","","",389,null],[11,"eq","collections","",390,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",390,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",390,null],[11,"fmt","","",390,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",390,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"new","alloc::boxed","Allocates memory on the heap and then moves `x` into it.",21,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",21,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",21,null],[11,"default","","",21,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",21,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",21,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",21,null],[11,"eq","","",21,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",21,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",21,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",21,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",21,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",21,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",21,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",21,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"next_back","","",21,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",21,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",21,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"deref","collections::vec","",387,{"inputs":[{"name":"derefvec"}],"output":{"name":"vec"}}],[11,"hash","core::result","",391,null],[11,"fmt","","",391,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",391,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",391,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",391,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",391,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",391,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",391,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",391,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",391,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",391,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",391,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",391,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",391,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",391,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",391,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",391,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",391,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",391,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",391,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",391,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",391,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",391,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",391,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",391,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",391,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",391,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",391,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",391,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",391,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",391,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",391,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",391,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",392,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",392,null],[11,"next_back","","",392,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",392,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",393,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",393,null],[11,"next_back","","",393,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",394,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",394,null],[11,"next_back","","",394,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",391,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::simd","",395,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",395,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",396,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",396,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",397,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",397,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",398,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",398,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",399,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",399,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",400,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",400,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",401,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",401,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",402,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",402,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",403,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",403,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",404,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",404,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"eq","core::ops","",405,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",405,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",405,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",405,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",370,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",370,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",370,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",370,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",368,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",368,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",368,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",368,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",369,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",369,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",369,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",369,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","core::iter","",406,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",406,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",406,null],[11,"next_back","","",406,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"indexable","","",406,{"inputs":[{"name":"rev"}],"output":{"name":"usize"}}],[11,"idx","","",406,{"inputs":[{"name":"rev"},{"name":"usize"}],"output":{"name":"option"}}],[11,"fmt","","",407,{"inputs":[{"name":"minmaxresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",407,{"inputs":[{"name":"minmaxresult"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"ne","","",407,{"inputs":[{"name":"minmaxresult"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"clone","","",407,{"inputs":[{"name":"minmaxresult"}],"output":{"name":"minmaxresult"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option`\nhas variant `None` if and only if the `MinMaxResult` has variant\n`NoElements`. Otherwise variant `Some(x,y)` is returned where `x <= y`.\nIf `MinMaxResult` has variant `OneElement(x)`, performing this operation\nwill make one clone of `x`.",407,{"inputs":[{"name":"minmaxresult"}],"output":{"name":"option"}}],[11,"clone","","",408,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",408,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",408,null],[11,"next_back","","",408,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"indexable","","",408,{"inputs":[{"name":"cloned"}],"output":{"name":"usize"}}],[11,"idx","","",408,{"inputs":[{"name":"cloned"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",409,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",409,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",409,null],[11,"indexable","","",409,{"inputs":[{"name":"cycle"}],"output":{"name":"usize"}}],[11,"idx","","",409,{"inputs":[{"name":"cycle"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",410,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"next","","",410,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",410,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",410,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",410,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",410,null],[11,"next_back","","",410,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"indexable","","",410,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"idx","","",410,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",411,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",411,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",411,null],[11,"next_back","","",411,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"indexable","","",411,{"inputs":[{"name":"zip"}],"output":{"name":"usize"}}],[11,"idx","","",411,{"inputs":[{"name":"zip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",412,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",412,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",412,null],[11,"next_back","","",412,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"indexable","","",412,{"inputs":[{"name":"map"}],"output":{"name":"usize"}}],[11,"idx","","",412,{"inputs":[{"name":"map"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",413,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",413,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",413,null],[11,"next_back","","",413,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",414,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",414,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",414,null],[11,"next_back","","",414,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",415,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",415,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",415,null],[11,"nth","","",415,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",415,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",415,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"indexable","","",415,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"idx","","",415,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",416,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",416,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",416,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",416,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",416,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",416,null],[11,"peek","","Returns a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",416,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks whether peekable iterator is empty or not.",416,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",417,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",417,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",417,null],[11,"clone","","",418,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",418,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",418,null],[11,"clone","","",419,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",419,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",419,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",419,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",419,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",419,null],[11,"indexable","","",419,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"idx","","",419,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",420,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",420,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",420,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",420,null],[11,"indexable","","",420,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"idx","","",420,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",421,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",421,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",421,null],[11,"clone","","",422,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",422,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",422,null],[11,"next_back","","",422,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",423,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",423,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",423,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",423,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",423,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",423,null],[11,"next_back","","",423,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"indexable","","",423,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"idx","","",423,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"reset_fuse","","Resets the `Fuse` such that the next call to `.next()` or\n`.next_back()` will call the underlying iterator again even if it\npreviously returned `None`.",423,null],[11,"clone","","",424,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",424,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",424,null],[11,"next_back","","",424,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"indexable","","",424,{"inputs":[{"name":"inspect"}],"output":{"name":"usize"}}],[11,"idx","","",424,{"inputs":[{"name":"inspect"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",425,{"inputs":[{"name":"unfold"}],"output":{"name":"unfold"}}],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",425,{"inputs":[{"name":"unfold"},{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",425,{"inputs":[{"name":"unfold"}],"output":{"name":"option"}}],[11,"size_hint","","",425,null],[11,"clone","","",426,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",368,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",370,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",426,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",426,null],[11,"clone","","",427,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",427,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",427,null],[11,"next_back","","",427,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",426,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",426,null],[11,"next","core::ops","",370,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",370,null],[11,"next_back","","",370,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",368,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",428,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",428,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",428,null],[11,"next_back","","",428,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"indexable","","",428,{"inputs":[{"name":"repeat"}],"output":{"name":"usize"}}],[11,"idx","","",428,{"inputs":[{"name":"repeat"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",429,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",429,null],[11,"next_back","","",429,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",429,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",429,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",429,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",430,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",430,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",430,null],[11,"next_back","","",430,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",430,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"clone","core::raw","",431,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",432,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",433,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",433,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",433,null],[11,"finish","","",433,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",433,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",433,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",295,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` is unique.",295,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",295,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",295,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",295,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",295,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` is\nunique.",295,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_unique","","Make a mutable reference from the given `Rc<T>`.",295,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",295,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",295,null],[11,"clone","","Makes a clone of the `Rc<T>`.",295,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",295,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",295,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",295,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",295,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",295,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",295,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",295,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",295,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",295,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",295,null],[11,"fmt","","",295,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",295,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",295,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",434,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",434,null],[11,"clone","","Makes a clone of the `Weak<T>`.",434,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",434,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::ptr","Creates a new `Unique`.",435,null],[11,"get","","Dereferences the content.",435,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",435,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",435,null],[11,"fmt","","",435,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","openssl::ssl","",436,{"inputs":[{"name":"sslcontext"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",436,{"inputs":[{"name":"sslcontext"}],"output":null}],[11,"new","","Creates a new SSL context.",436,{"inputs":[{"name":"sslcontext"},{"name":"sslmethod"}],"output":{"name":"result"}}],[11,"set_verify","","Configures the certificate verification method for new connections.",436,{"inputs":[{"name":"sslcontext"},{"name":"sslverifymode"},{"name":"option"}],"output":null}],[11,"set_verify_with_data","","Configures the certificate verification method for new connections also\ncarrying supplied data.",436,{"inputs":[{"name":"sslcontext"},{"name":"sslverifymode"},{"name":"verifycallbackdata"},{"name":"t"}],"output":null}],[11,"set_verify_depth","","Sets verification depth",436,{"inputs":[{"name":"sslcontext"},{"name":"u32"}],"output":null}],[11,"set_read_ahead","","",436,{"inputs":[{"name":"sslcontext"},{"name":"u32"}],"output":null}],[11,"set_CA_file","","Specifies the file that contains trusted CA certificates.",436,{"inputs":[{"name":"sslcontext"},{"name":"p"}],"output":{"name":"result"}}],[11,"set_certificate_file","","Specifies the file that contains certificate",436,{"inputs":[{"name":"sslcontext"},{"name":"p"},{"name":"x509filetype"}],"output":{"name":"result"}}],[11,"set_certificate","","Specifies the certificate",436,{"inputs":[{"name":"sslcontext"},{"name":"x509"}],"output":{"name":"result"}}],[11,"add_extra_chain_cert","","Adds a certificate to the certificate chain presented together with the\ncertificate specified using set_certificate()",436,{"inputs":[{"name":"sslcontext"},{"name":"x509"}],"output":{"name":"result"}}],[11,"set_private_key_file","","Specifies the file that contains private key",436,{"inputs":[{"name":"sslcontext"},{"name":"p"},{"name":"x509filetype"}],"output":{"name":"result"}}],[11,"set_private_key","","Specifies the private key",436,{"inputs":[{"name":"sslcontext"},{"name":"pkey"}],"output":{"name":"result"}}],[11,"check_private_key","","Check consistency of private key and certificate",436,{"inputs":[{"name":"sslcontext"}],"output":{"name":"result"}}],[11,"set_cipher_list","","",436,{"inputs":[{"name":"sslcontext"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_options","","",436,{"inputs":[{"name":"sslcontext"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"get_options","","",436,{"inputs":[{"name":"sslcontext"}],"output":{"name":"sslcontextoptions"}}],[11,"clear_options","","",436,{"inputs":[{"name":"sslcontext"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"set_npn_protocols","","Set the protocols to be used during Next Protocol Negotiation (the protocols\nsupported by the application).",436,null],[11,"fmt","","",437,{"inputs":[{"name":"ssl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",437,{"inputs":[{"name":"ssl"}],"output":null}],[11,"new","","",437,{"inputs":[{"name":"ssl"},{"name":"sslcontext"}],"output":{"name":"result"}}],[11,"set_hostname","","Set the host name to be used with SNI (Server Name Indication).",437,{"inputs":[{"name":"ssl"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_peer_certificate","","",437,{"inputs":[{"name":"ssl"}],"output":{"name":"option"}}],[11,"get_selected_npn_protocol","","Returns the protocol selected by performing Next Protocol Negotiation, if any.",437,{"inputs":[{"name":"ssl"}],"output":{"name":"option"}}],[11,"pending","","pending() takes into account only bytes from the TLS/SSL record that is currently being processed (if any).",437,{"inputs":[{"name":"ssl"}],"output":{"name":"usize"}}],[11,"clone","","",438,{"inputs":[{"name":"sslstream"}],"output":{"name":"sslstream"}}],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",438,{"inputs":[{"name":"sslstream"}],"output":{"name":"result"}}],[11,"fmt","","",438,{"inputs":[{"name":"sslstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_server_from","","",438,{"inputs":[{"name":"sslstream"},{"name":"ssl"},{"name":"s"}],"output":{"name":"result"}}],[11,"new_from","","Attempts to create a new SSL stream from a given `Ssl` instance.",438,{"inputs":[{"name":"sslstream"},{"name":"ssl"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","","Creates a new SSL stream",438,{"inputs":[{"name":"sslstream"},{"name":"sslcontext"},{"name":"s"}],"output":{"name":"result"}}],[11,"new_server","","Creates a new SSL server stream",438,{"inputs":[{"name":"sslstream"},{"name":"sslcontext"},{"name":"s"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a reference to the underlying stream.",438,{"inputs":[{"name":"sslstream"}],"output":{"name":"s"}}],[11,"get_peer_certificate","","Return the certificate of the peer",438,{"inputs":[{"name":"sslstream"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying stream.",438,{"inputs":[{"name":"sslstream"}],"output":{"name":"s"}}],[11,"get_compression","","Get the compression currently in use.  The result will be\neither None, indicating no compression is in use, or a string\nwith the compression name.",438,{"inputs":[{"name":"sslstream"}],"output":{"name":"option"}}],[11,"get_selected_npn_protocol","","Returns the protocol selected by performing Next Protocol Negotiation, if any.",438,{"inputs":[{"name":"sslstream"}],"output":{"name":"option"}}],[11,"pending","","pending() takes into account only bytes from the TLS/SSL record that is currently being processed (if any).",438,{"inputs":[{"name":"sslstream"}],"output":{"name":"usize"}}],[11,"read","","",438,null],[11,"write","","",438,null],[11,"flush","","",438,{"inputs":[{"name":"sslstream"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"maybesslstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",15,null],[11,"write","","",15,null],[11,"flush","","",15,{"inputs":[{"name":"maybesslstream"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a reference to the underlying stream.",15,{"inputs":[{"name":"maybesslstream"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the underlying stream.",15,{"inputs":[{"name":"maybesslstream"}],"output":{"name":"s"}}],[0,"x509","openssl","",null,null],[3,"SslString","openssl::x509","",null,null],[3,"X509StoreContext","","",null,null],[3,"X509Generator","","Generator of private key/certificate pairs",null,null],[3,"X509","","A public key certificate",null,null],[3,"X509Name","","",null,null],[3,"X509NameEntry","","",null,null],[3,"X509Req","","A certificate signing request",null,null],[4,"X509FileType","","",null,null],[13,"PEM","","",439,null],[13,"ASN1","","",439,null],[13,"Default","","",439,null],[4,"KeyUsage","","",null,null],[13,"DigitalSignature","","",440,null],[13,"NonRepudiation","","",440,null],[13,"KeyEncipherment","","",440,null],[13,"DataEncipherment","","",440,null],[13,"KeyAgreement","","",440,null],[13,"KeyCertSign","","",440,null],[13,"CRLSign","","",440,null],[13,"EncipherOnly","","",440,null],[13,"DecipherOnly","","",440,null],[4,"ExtKeyUsage","","",null,null],[13,"ServerAuth","","",441,null],[13,"ClientAuth","","",441,null],[13,"CodeSigning","","",441,null],[13,"EmailProtection","","",441,null],[13,"TimeStamping","","",441,null],[13,"MsCodeInd","","",441,null],[13,"MsCodeCom","","",441,null],[13,"MsCtlSign","","",441,null],[13,"MsSgc","","",441,null],[13,"MsEfs","","",441,null],[13,"NsSgc","","",441,null],[4,"X509ValidationError","","",null,null],[13,"X509UnableToGetIssuerCert","","",442,null],[13,"X509UnableToGetCrl","","",442,null],[13,"X509UnableToDecryptCertSignature","","",442,null],[13,"X509UnableToDecryptCrlSignature","","",442,null],[13,"X509UnableToDecodeIssuerPublicKey","","",442,null],[13,"X509CertSignatureFailure","","",442,null],[13,"X509CrlSignatureFailure","","",442,null],[13,"X509CertNotYetValid","","",442,null],[13,"X509CertHasExpired","","",442,null],[13,"X509CrlNotYetValid","","",442,null],[13,"X509CrlHasExpired","","",442,null],[13,"X509ErrorInCertNotBeforeField","","",442,null],[13,"X509ErrorInCertNotAfterField","","",442,null],[13,"X509ErrorInCrlLastUpdateField","","",442,null],[13,"X509ErrorInCrlNextUpdateField","","",442,null],[13,"X509OutOfMem","","",442,null],[13,"X509DepthZeroSelfSignedCert","","",442,null],[13,"X509SelfSignedCertInChain","","",442,null],[13,"X509UnableToGetIssuerCertLocally","","",442,null],[13,"X509UnableToVerifyLeafSignature","","",442,null],[13,"X509CertChainTooLong","","",442,null],[13,"X509CertRevoked","","",442,null],[13,"X509InvalidCA","","",442,null],[13,"X509PathLengthExceeded","","",442,null],[13,"X509InvalidPurpose","","",442,null],[13,"X509CertUntrusted","","",442,null],[13,"X509CertRejected","","",442,null],[13,"X509SubjectIssuerMismatch","","",442,null],[13,"X509AkidSkidMismatch","","",442,null],[13,"X509AkidIssuerSerialMismatch","","",442,null],[13,"X509KeyusageNoCertsign","","",442,null],[13,"X509UnableToGetCrlIssuer","","",442,null],[13,"X509UnhandledCriticalExtension","","",442,null],[13,"X509KeyusageNoCrlSign","","",442,null],[13,"X509UnhandledCriticalCrlExtension","","",442,null],[13,"X509InvalidNonCA","","",442,null],[13,"X509ProxyPathLengthExceeded","","",442,null],[13,"X509KeyusageNoDigitalSignature","","",442,null],[13,"X509ProxyCertificatesNotAllowed","","",442,null],[13,"X509InvalidExtension","","",442,null],[13,"X509InavlidPolicyExtension","","",442,null],[13,"X509NoExplicitPolicy","","",442,null],[13,"X509DifferentCrlScope","","",442,null],[13,"X509UnsupportedExtensionFeature","","",442,null],[13,"X509UnnestedResource","","",442,null],[13,"X509PermittedVolation","","",442,null],[13,"X509ExcludedViolation","","",442,null],[13,"X509SubtreeMinmax","","",442,null],[13,"X509UnsupportedConstraintType","","",442,null],[13,"X509UnsupportedConstraintSyntax","","",442,null],[13,"X509UnsupportedNameSyntax","","",442,null],[13,"X509CrlPathValidationError","","",442,null],[13,"X509ApplicationVerification","","",442,null],[13,"X509UnknownError","","",442,null],[11,"drop","","",443,{"inputs":[{"name":"sslstring"}],"output":null}],[11,"deref","","",443,{"inputs":[{"name":"sslstring"}],"output":{"name":"str"}}],[11,"fmt","","",443,{"inputs":[{"name":"sslstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",443,{"inputs":[{"name":"sslstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",439,{"inputs":[{"name":"x509filetype"}],"output":{"name":"x509filetype"}}],[11,"new","","",444,null],[11,"get_error","","",444,{"inputs":[{"name":"x509storecontext"}],"output":{"name":"option"}}],[11,"get_current_cert","","",444,{"inputs":[{"name":"x509storecontext"}],"output":{"name":"option"}}],[11,"clone","","",440,{"inputs":[{"name":"keyusage"}],"output":{"name":"keyusage"}}],[11,"clone","","",441,{"inputs":[{"name":"extkeyusage"}],"output":{"name":"extkeyusage"}}],[11,"new","","Creates a new generator with the following defaults:",445,{"inputs":[{"name":"x509generator"}],"output":{"name":"x509generator"}}],[11,"set_bitlength","","Sets desired bit length",445,{"inputs":[{"name":"x509generator"},{"name":"u32"}],"output":{"name":"x509generator"}}],[11,"set_valid_period","","Sets certificate validity period in days since today",445,{"inputs":[{"name":"x509generator"},{"name":"u32"}],"output":{"name":"x509generator"}}],[11,"set_CN","","Sets Common Name of certificate",445,{"inputs":[{"name":"x509generator"},{"name":"str"}],"output":{"name":"x509generator"}}],[11,"set_usage","","Sets what for certificate could be used",445,null],[11,"set_ext_usage","","Sets allowed extended usage of certificate",445,null],[11,"set_sign_hash","","",445,{"inputs":[{"name":"x509generator"},{"name":"type"}],"output":{"name":"x509generator"}}],[11,"generate","","Generates a private key and a self-signed certificate and returns them",445,{"inputs":[{"name":"x509generator"}],"output":{"name":"result"}}],[11,"sign","","Sets the certificate public-key, then self-sign and return it\nNote: That the bit-length of the private key is used (set_bitlength is ignored)",445,{"inputs":[{"name":"x509generator"},{"name":"pkey"}],"output":{"name":"result"}}],[11,"request","","Obtain a certificate signing request (CSR)",445,{"inputs":[{"name":"x509generator"},{"name":"pkey"}],"output":{"name":"result"}}],[11,"new","","Creates new from handle with desired ownership.",446,null],[11,"new_in_ctx","","Creates a new certificate from context. Doesn't take ownership\nof handle.",446,null],[11,"from_pem","","Reads certificate from PEM, takes ownership of handle",446,{"inputs":[{"name":"x509"},{"name":"r"}],"output":{"name":"result"}}],[11,"get_handle","","",446,null],[11,"subject_name","","",446,{"inputs":[{"name":"x509"}],"output":{"name":"x509name"}}],[11,"public_key","","",446,{"inputs":[{"name":"x509"}],"output":{"name":"pkey"}}],[11,"fingerprint","","Returns certificate fingerprint calculated using provided hash",446,{"inputs":[{"name":"x509"},{"name":"type"}],"output":{"name":"option"}}],[11,"write_pem","","Writes certificate as PEM",446,{"inputs":[{"name":"x509"},{"name":"w"}],"output":{"name":"result"}}],[11,"drop","","",446,{"inputs":[{"name":"x509"}],"output":null}],[11,"text_by_nid","","",447,{"inputs":[{"name":"x509name"},{"name":"nid"}],"output":{"name":"option"}}],[11,"new","","Creates new from handle",448,null],[11,"from_pem","","Reads CSR from PEM",448,{"inputs":[{"name":"x509req"},{"name":"r"}],"output":{"name":"result"}}],[11,"write_pem","","Writes CSR as PEM",448,{"inputs":[{"name":"x509req"},{"name":"w"}],"output":{"name":"result"}}],[11,"drop","","",448,{"inputs":[{"name":"x509req"}],"output":null}],[11,"clone","","",442,{"inputs":[{"name":"x509validationerror"}],"output":{"name":"x509validationerror"}}],[0,"nid","openssl","",null,null],[4,"Nid","openssl::nid","",null,null],[13,"Undefined","","",449,null],[13,"Rsadsi","","",449,null],[13,"Pkcs","","",449,null],[13,"MD2","","",449,null],[13,"MD4","","",449,null],[13,"MD5","","",449,null],[13,"RC4","","",449,null],[13,"RsaEncryption","","",449,null],[13,"RSA_MD2","","",449,null],[13,"RSA_MD5","","",449,null],[13,"PBE_MD2_DES","","",449,null],[13,"X500","","",449,null],[13,"x509","","",449,null],[13,"CN","","",449,null],[13,"C","","",449,null],[13,"L","","",449,null],[13,"ST","","",449,null],[13,"O","","",449,null],[13,"OU","","",449,null],[13,"RSA","","",449,null],[13,"Pkcs7","","",449,null],[13,"Pkcs7_data","","",449,null],[13,"Pkcs7_signedData","","",449,null],[13,"Pkcs7_envelopedData","","",449,null],[13,"Pkcs7_signedAndEnvelopedData","","",449,null],[13,"Pkcs7_digestData","","",449,null],[13,"Pkcs7_encryptedData","","",449,null],[13,"Pkcs3","","",449,null],[13,"DhKeyAgreement","","",449,null],[13,"DES_ECB","","",449,null],[13,"DES_CFB","","",449,null],[13,"DES_CBC","","",449,null],[13,"DES_EDE","","",449,null],[13,"DES_EDE3","","",449,null],[13,"IDEA_CBC","","",449,null],[13,"IDEA_ECB","","",449,null],[13,"RC2_CBC","","",449,null],[13,"RC2_ECB","","",449,null],[13,"RC2_CFB","","",449,null],[13,"RC2_OFB","","",449,null],[13,"SHA","","",449,null],[13,"RSA_SHA","","",449,null],[13,"DES_EDE_CBC","","",449,null],[13,"DES_EDE3_CBC","","",449,null],[13,"DES_OFB","","",449,null],[13,"IDEA_OFB","","",449,null],[13,"Pkcs9","","",449,null],[13,"Email","","",449,null],[13,"UnstructuredName","","",449,null],[13,"ContentType","","",449,null],[13,"MessageDigest","","",449,null],[13,"SigningTime","","",449,null],[13,"CounterSignature","","",449,null],[13,"UnstructuredAddress","","",449,null],[13,"ExtendedCertificateAttributes","","",449,null],[13,"Netscape","","",449,null],[13,"NetscapeCertExtention","","",449,null],[13,"NetscapeDatatype","","",449,null],[13,"DES_EDE_CFB64","","",449,null],[13,"DES_EDE3_CFB64","","",449,null],[13,"DES_EDE_OFB64","","",449,null],[13,"DES_EDE3_OFB64","","",449,null],[13,"SHA1","","",449,null],[13,"RSA_SHA1","","",449,null],[13,"DSA_SHA","","",449,null],[13,"DSA_OLD","","",449,null],[13,"PBE_SHA1_RC2_64","","",449,null],[13,"PBKDF2","","",449,null],[13,"DSA_SHA1_OLD","","",449,null],[13,"NetscapeCertType","","",449,null],[13,"NetscapeBaseUrl","","",449,null],[13,"NetscapeRevocationUrl","","",449,null],[13,"NetscapeCARevocationUrl","","",449,null],[13,"NetscapeRenewalUrl","","",449,null],[13,"NetscapeCAPolicyUrl","","",449,null],[13,"NetscapeSSLServerName","","",449,null],[13,"NetscapeComment","","",449,null],[13,"NetscapeCertSequence","","",449,null],[13,"DESX_CBC","","",449,null],[13,"ID_CE","","",449,null],[13,"SubjectKeyIdentifier","","",449,null],[13,"KeyUsage","","",449,null],[13,"PrivateKeyUsagePeriod","","",449,null],[13,"SubjectAltName","","",449,null],[13,"IssuerAltName","","",449,null],[13,"BasicConstraints","","",449,null],[13,"CrlNumber","","",449,null],[13,"CertificatePolicies","","",449,null],[13,"AuthorityKeyIdentifier","","",449,null],[13,"BF_CBC","","",449,null],[13,"BF_ECB","","",449,null],[13,"BF_OFB","","",449,null],[13,"MDC2","","",449,null],[13,"RSA_MDC2","","",449,null],[13,"RC4_40","","",449,null],[13,"RC2_40_CBC","","",449,null],[13,"G","","",449,null],[13,"S","","",449,null],[13,"I","","",449,null],[13,"UID","","",449,null],[13,"CrlDistributionPoints","","",449,null],[13,"RSA_NP_MD5","","",449,null],[13,"SN","","",449,null],[13,"T","","",449,null],[13,"D","","",449,null],[13,"CAST5_CBC","","",449,null],[13,"CAST5_ECB","","",449,null],[13,"CAST5_CFB","","",449,null],[13,"CAST5_OFB","","",449,null],[13,"PbeWithMD5AndCast5CBC","","",449,null],[13,"DSA_SHA1","","",449,null],[13,"MD5_SHA1","","",449,null],[13,"RSA_SHA1_2","","",449,null],[13,"DSA","","",449,null],[13,"RIPEMD160","","",449,null],[13,"RSA_RIPEMD160","","",449,null],[13,"RC5_CBC","","",449,null],[13,"RC5_ECB","","",449,null],[13,"RC5_CFB","","",449,null],[13,"RC5_OFB","","",449,null],[13,"RLE","","",449,null],[13,"ZLIB","","",449,null],[13,"ExtendedKeyUsage","","",449,null],[13,"PKIX","","",449,null],[13,"ID_KP","","",449,null],[13,"ServerAuth","","",449,null],[13,"ClientAuth","","",449,null],[13,"CodeSigning","","",449,null],[13,"EmailProtection","","",449,null],[13,"TimeStamping","","",449,null],[13,"MsCodeInd","","",449,null],[13,"MsCodeCom","","",449,null],[13,"MsCtlSigh","","",449,null],[13,"MsSGC","","",449,null],[13,"MsEFS","","",449,null],[13,"NsSGC","","",449,null],[13,"DeltaCRL","","",449,null],[13,"CRLReason","","",449,null],[13,"InvalidityDate","","",449,null],[13,"SXNetID","","",449,null],[13,"Pkcs12","","",449,null],[13,"PBE_SHA1_RC4_128","","",449,null],[13,"PBE_SHA1_RC4_40","","",449,null],[13,"PBE_SHA1_3DES","","",449,null],[13,"PBE_SHA1_2DES","","",449,null],[13,"PBE_SHA1_RC2_128","","",449,null],[13,"PBE_SHA1_RC2_40","","",449,null],[13,"KeyBag","","",449,null],[13,"Pkcs8ShroudedKeyBag","","",449,null],[13,"CertBag","","",449,null],[13,"CrlBag","","",449,null],[13,"SecretBag","","",449,null],[13,"SafeContentsBag","","",449,null],[13,"FriendlyName","","",449,null],[13,"LocalKeyID","","",449,null],[13,"X509Certificate","","",449,null],[13,"SdsiCertificate","","",449,null],[13,"X509Crl","","",449,null],[13,"PBES2","","",449,null],[13,"PBMAC1","","",449,null],[13,"HmacWithSha1","","",449,null],[13,"ID_QT_CPS","","",449,null],[13,"ID_QT_UNOTICE","","",449,null],[13,"RC2_64_CBC","","",449,null],[13,"SMIMECaps","","",449,null],[11,"clone","","",449,{"inputs":[{"name":"nid"}],"output":{"name":"nid"}}]],"paths":[[3,"Asn1Time"],[4,"RNGProperty"],[3,"BigNum"],[3,"MemBio"],[4,"Type"],[3,"Hasher"],[3,"HMAC"],[4,"Parts"],[4,"Role"],[4,"EncryptionPadding"],[3,"PKey"],[4,"Mode"],[4,"Type"],[3,"Crypter"],[4,"SslMethod"],[4,"MaybeSslStream"],[4,"SslError"],[4,"OpensslError"],[3,"SslContextOptions"],[3,"SslVerifyMode"],[3,"Mutex"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[8,"Error"],[3,"String"],[3,"Vec"],[3,"EscapeDefault"],[3,"Wrapping"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"JoinGuard"],[3,"RawBucket"],[3,"Bucket"],[3,"SafeHash"],[3,"FullBucket"],[3,"EmptyBucket"],[4,"BucketState"],[3,"GapThenFull"],[3,"RawTable"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DefaultResizePolicy"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"DefaultState"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"VecMap"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"],[3,"DynamicLibrary"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"Metadata"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[3,"Path"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"InternalBufWriter"],[3,"BufStream"],[3,"Cursor"],[3,"Custom"],[4,"ErrorKind"],[4,"Repr"],[3,"Lazy"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"StdinRaw"],[3,"StdoutRaw"],[3,"StderrRaw"],[4,"Maybe"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[4,"Prefix"],[4,"State"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"SignalToken"],[3,"WaitToken"],[3,"Packet"],[4,"StartResult"],[3,"Select"],[3,"Handle"],[3,"Packets"],[3,"Packet"],[3,"Packet"],[4,"Failure"],[3,"Packet"],[3,"Queue"],[3,"Queue"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Future"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Duration"],[3,"Condvar"],[3,"Mutex"],[3,"LookupHost"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Flag"],[3,"PoisonError"],[4,"TryLockError"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RWLock"],[3,"StaticKey"],[3,"Key"],[3,"CodePoint"],[3,"Wtf8Buf"],[3,"Wtf8"],[3,"Wtf8CodePoints"],[3,"EncodeWide"],[3,"Condvar"],[3,"FileDesc"],[3,"OpenOptions"],[3,"FilePermissions"],[3,"FileType"],[3,"FileAttr"],[3,"ReadDir"],[3,"Dir"],[3,"DirEntry"],[3,"File"],[3,"DirBuilder"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"Socket"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Env"],[3,"Buf"],[3,"Slice"],[3,"AnonPipe"],[3,"Command"],[4,"ExitStatus"],[3,"Process"],[3,"RWLock"],[3,"Handler"],[3,"Thread"],[3,"SteadyTime"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[4,"_Unwind_Action"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRngReseeder"],[3,"ThreadRng"],[8,"Any"],[3,"TypeId"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"ToTitlecase"],[4,"CaseMappingIter"],[4,"Ordering"],[3,"Rc"],[3,"Arc"],[4,"Cow"],[3,"NoCopy"],[3,"PhantomData"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ElementSwaps"],[4,"Direction"],[3,"SizeDirection"],[3,"Permutations"],[3,"IntoIter"],[3,"Drain"],[3,"BitVec"],[3,"Iter"],[3,"BitSet"],[3,"BlockIter"],[3,"TwoBitPositions"],[3,"SetIter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"RawItems"],[3,"Node"],[3,"Handle"],[3,"ElemsAndEdges"],[3,"MoveTraversalImpl"],[3,"AbsTraversal"],[3,"NodeSlice"],[3,"MutNodeSlice"],[3,"BTreeMap"],[3,"AbsIter"],[3,"IdRef"],[3,"PartialSearchStack"],[3,"Pusher"],[3,"SearchStack"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"EnumSet"],[3,"Iter"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[4,"DecompositionType"],[3,"Decompositions"],[4,"RecompositionState"],[3,"Recompositions"],[3,"Utf16Units"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"StrSearcher"],[4,"State"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"DerefString"],[3,"ParseError"],[3,"Drain"],[3,"DerefVec"],[3,"PartialVecNonZeroSized"],[3,"PartialVecZeroSized"],[4,"Bound"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"RangeFull"],[3,"Rev"],[4,"MinMaxResult"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Unfold"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Slice"],[3,"TraitObject"],[3,"SipHasher"],[3,"Weak"],[3,"Unique"],[3,"SslContext"],[3,"Ssl"],[3,"SslStream"],[4,"X509FileType"],[4,"KeyUsage"],[4,"ExtKeyUsage"],[4,"X509ValidationError"],[3,"SslString"],[3,"X509StoreContext"],[3,"X509Generator"],[3,"X509"],[3,"X509Name"],[3,"X509Req"],[4,"Nid"]]};
initSearch(searchIndex);

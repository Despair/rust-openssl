var searchIndex = {};
searchIndex['openssl'] = {"items":[[0,"","openssl",""],[0,"asn1","",""],[3,"Asn1Time","openssl::asn1",""],[11,"new","","Wraps existing ASN1_TIME and takes ownership",0],[11,"days_from_now","","Creates a new time on specified interval in days from now",0],[11,"get_handle","","Returns raw handle",0],[11,"drop","","",0],[0,"bn","openssl",""],[3,"BigNum","openssl::bn",""],[4,"RNGProperty","",""],[13,"MsbMaybeZero","","",1],[13,"MsbOne","","",1],[13,"TwoMsbOne","","",1],[0,"unchecked","",""],[6,"Output","openssl::bn::unchecked",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"clone","openssl::bn","",2],[6,"Output","openssl::bn::unchecked",""],[11,"neg","openssl::bn","",2],[11,"new","","",2],[11,"new_from","","",2],[11,"from_dec_str","","",2],[11,"from_hex_str","","",2],[11,"new_from_slice","","",2],[11,"checked_sqr","","",2],[11,"checked_nnmod","","",2],[11,"checked_mod_add","","",2],[11,"checked_mod_sub","","",2],[11,"checked_mod_mul","","",2],[11,"checked_mod_sqr","","",2],[11,"checked_exp","","",2],[11,"checked_mod_exp","","",2],[11,"checked_mod_inv","","",2],[11,"add_word","","",2],[11,"sub_word","","",2],[11,"mul_word","","",2],[11,"div_word","","",2],[11,"mod_word","","",2],[11,"checked_gcd","","",2],[11,"checked_generate_prime","","",2],[11,"is_prime","","",2],[11,"is_prime_fast","","",2],[11,"checked_new_random","","",2],[11,"checked_new_pseudo_random","","",2],[11,"checked_rand_in_range","","",2],[11,"checked_pseudo_rand_in_range","","",2],[11,"set_bit","","",2],[11,"clear_bit","","",2],[11,"is_bit_set","","",2],[11,"mask_bits","","",2],[11,"checked_shl1","","",2],[11,"checked_shr1","","",2],[11,"checked_add","","",2],[11,"checked_sub","","",2],[11,"checked_mul","","",2],[11,"checked_div","","",2],[11,"checked_mod","","",2],[11,"checked_shl","","",2],[11,"checked_shr","","",2],[11,"negate","","",2],[11,"abs_cmp","","",2],[11,"is_negative","","",2],[11,"num_bits","","",2],[11,"num_bytes","","",2],[11,"to_vec","","",2],[11,"to_dec_str","","",2],[11,"to_hex_str","","",2],[11,"fmt","","",2],[11,"eq","","",2],[11,"cmp","","",2],[11,"partial_cmp","","",2],[11,"drop","","",2],[0,"bio","openssl",""],[3,"MemBio","openssl::bio",""],[11,"drop","","",3],[11,"new","","Creates a new owned memory based BIO",3],[11,"borrowed","","Returns a \"borrow\", i.e. it has no ownership",3],[11,"unwrap","","Consumes current bio and returns wrapped value\nNote that data ownership is lost and\nshould be managed manually",3],[11,"get_handle","","Temporarily gets wrapped value",3],[11,"read","","",3],[11,"write_all","","",3],[0,"crypto","openssl",""],[0,"hash","openssl::crypto",""],[3,"Hasher","openssl::crypto::hash","Provides message digest (hash) computation."],[4,"Type","","Message digest (hash) type."],[13,"MD5","","",4],[13,"SHA1","","",4],[13,"SHA224","","",4],[13,"SHA256","","",4],[13,"SHA384","","",4],[13,"SHA512","","",4],[13,"RIPEMD160","","",4],[5,"hash","","Computes the hash of the `data` with the hash `t`."],[11,"md_len","","Returns the length of the message digest.",4],[11,"evp_md","","Internal interface subject to removal.",4],[11,"new","","Creates a new `Hasher` with the specified hash type.",5],[11,"finish","","Returns the hash of the data written since creation or\nthe last `finish` and resets the hasher.",5],[11,"write_all","","",5],[11,"clone","","",5],[11,"drop","","",5],[0,"hmac","openssl::crypto",""],[3,"HMAC","openssl::crypto::hmac","Provides HMAC computation."],[5,"hmac","","Computes the HMAC of the `data` with the hash `t` and `key`."],[11,"new","","Creates a new `HMAC` with the specified hash type using the `key`.",6],[11,"finish","","Returns the hash of the data written since creation or\nthe last `finish` and resets the hasher.",6],[11,"write_all","","",6],[11,"clone","","",6],[11,"drop","","",6],[0,"pkcs5","openssl::crypto",""],[5,"pbkdf2_hmac_sha1","openssl::crypto::pkcs5","Derives a key from a password and salt using the PBKDF2-HMAC-SHA1 algorithm."],[0,"pkey","openssl::crypto",""],[3,"PKey","openssl::crypto::pkey",""],[4,"Role","","Represents a role an asymmetric key might be appropriate for."],[13,"Encrypt","","",7],[13,"Decrypt","","",7],[13,"Sign","","",7],[13,"Verify","","",7],[4,"EncryptionPadding","","Type of encryption padding to use."],[13,"OAEP","","",8],[13,"PKCS1v15","","",8],[11,"new","","",9],[11,"gen","","",9],[11,"save_pub","","Returns a serialized form of the public key, suitable for load_pub().",9],[11,"load_pub","","Loads a serialized form of the public key, as produced by save_pub().",9],[11,"save_priv","","Returns a serialized form of the public and private keys, suitable for\nload_priv().",9],[11,"load_priv","","Loads a serialized form of the public and private keys, as produced by\nsave_priv().",9],[11,"write_pem","","Stores private key as a PEM",9],[11,"size","","Returns the size of the public key modulus.",9],[11,"can","","Returns whether this pkey object can perform the specified role.",9],[11,"max_data","","Returns the maximum amount of data that can be encrypted by an encrypt()\ncall.",9],[11,"encrypt_with_padding","","",9],[11,"decrypt_with_padding","","",9],[11,"encrypt","","Encrypts data using OAEP padding, returning the encrypted data. The\nsupplied data must not be larger than max_data().",9],[11,"decrypt","","Decrypts data, expecting OAEP padding, returning the decrypted data.",9],[11,"sign","","Signs data, using OpenSSL's default scheme and sha256. Unlike encrypt(),\ncan process an arbitrary amount of data; returns the signature.",9],[11,"verify","","Verifies a signature s (using OpenSSL's default scheme and sha256) on a\nmessage m. Returns true if the signature is valid, and false otherwise.",9],[11,"sign_with_hash","","",9],[11,"verify_with_hash","","",9],[11,"get_handle","","",9],[11,"drop","","",9],[0,"rand","openssl::crypto",""],[5,"rand_bytes","openssl::crypto::rand",""],[0,"symm","openssl::crypto",""],[3,"Crypter","openssl::crypto::symm","Represents a symmetric cipher context."],[4,"Mode","",""],[13,"Encrypt","","",10],[13,"Decrypt","","",10],[4,"Type","",""],[13,"AES_128_ECB","","",11],[13,"AES_128_CBC","","",11],[13,"AES_128_XTS","","Requires the `aes_xts` feature",11],[13,"AES_256_ECB","","",11],[13,"AES_256_CBC","","",11],[13,"AES_256_XTS","","Requires the `aes_xts` feature",11],[13,"RC4_128","","",11],[5,"encrypt","","Encrypts data, using the specified crypter type in encrypt mode with the\nspecified key and iv; returns the resulting (encrypted) data."],[5,"decrypt","","Decrypts data, using the specified crypter type in decrypt mode with the\nspecified key and iv; returns the resulting (decrypted) data."],[11,"new","","",12],[11,"pad","","Enables or disables padding. If padding is disabled, total amount of\ndata encrypted must be a multiple of block size.",12],[11,"init","","Initializes this crypter.",12],[11,"update","","Update this crypter with more data to encrypt or decrypt. Returns\nencrypted or decrypted bytes.",12],[11,"finalize","","Finish crypting. Returns the remaining partial block of output, if any.",12],[11,"drop","","",12],[0,"memcmp","openssl::crypto",""],[5,"eq","openssl::crypto::memcmp","Returns `true` iff `a` and `b` contain the same bytes."],[0,"ssl","openssl",""],[3,"SslContext","openssl::ssl","An SSL context object"],[3,"Ssl","",""],[3,"SslStream","","A stream wrapper which handles SSL encryption for an underlying stream."],[4,"SslMethod","","Determines the SSL method supported"],[13,"Sslv23","","Support the SSLv2, SSLv3 and TLSv1 protocols.",13],[13,"Sslv3","","Only support the SSLv3 protocol.",13],[13,"Tlsv1","","Only support the TLSv1 protocol.",13],[13,"Tlsv1_1","","Support TLSv1.1 protocol, requires the `tlsv1_1` feature.",13],[13,"Tlsv1_2","","Support TLSv1.2 protocol, requires the `tlsv1_2` feature.",13],[4,"SslVerifyMode","","Determines the type of certificate verification used"],[13,"SslVerifyPeer","","Verify that the server's certificate is trusted",14],[13,"SslVerifyNone","","Do not verify the server's certificate",14],[4,"MaybeSslStream","","A utility type to help in cases where the use of SSL is decided at runtime."],[13,"Ssl","","A connection using SSL",15],[13,"Normal","","A connection not using SSL",15],[0,"error","",""],[4,"SslError","openssl::ssl::error","An SSL error"],[13,"StreamError","","The underlying stream reported an error",16],[13,"SslSessionClosed","","The SSL session has been closed by the other end",16],[13,"OpenSslErrors","","An error in the OpenSSL library",16],[4,"OpensslError","","An error from the OpenSSL library"],[13,"UnknownError","","An unknown error",17],[12,"library","openssl::ssl::error::OpensslError","The library reporting the error",17],[12,"function","","The function reporting the error",17],[12,"reason","","The reason for the error",17],[11,"eq","openssl::ssl::error","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"fmt","","",16],[11,"fmt","","",16],[11,"description","","",16],[11,"cause","","",16],[11,"eq","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"fmt","","",17],[11,"get","","Creates a new `OpenSslErrors` with the current contents of the error\nstack.",16],[11,"from_error","","Creates an `SslError` from the raw numeric error code.",16],[6,"VerifyCallback","openssl::ssl","The signature of functions that can be used to manually verify certificates"],[6,"VerifyCallbackData","","The signature of functions that can be used to manually verify certificates\nwhen user-data should be carried for all verification process"],[11,"eq","","",13],[11,"ne","","",13],[11,"hash","","",13],[11,"fmt","","",13],[11,"clone","","",13],[11,"fmt","","",14],[11,"clone","","",14],[11,"fmt","","",18],[11,"drop","","",18],[11,"new","","Creates a new SSL context.",18],[11,"set_verify","","Configures the certificate verification method for new connections.",18],[11,"set_verify_with_data","","Configures the certificate verification method for new connections also\ncarrying supplied data.",18],[11,"set_verify_depth","","Sets verification depth",18],[11,"set_CA_file","","Specifies the file that contains trusted CA certificates.",18],[11,"set_certificate_file","","Specifies the file that contains certificate",18],[11,"set_private_key_file","","Specifies the file that contains private key",18],[11,"set_cipher_list","","",18],[11,"fmt","","",19],[11,"drop","","",19],[11,"new","","",19],[11,"set_hostname","","Set the host name to be used with SNI (Server Name Indication).",19],[11,"get_peer_certificate","","",19],[11,"clone","","",20],[11,"fmt","","",20],[11,"new_server_from","","",20],[11,"new_from","","Attempts to create a new SSL stream from a given `Ssl` instance.",20],[11,"new","","Creates a new SSL stream",20],[11,"new_server","","Creates a new SSL server stream",20],[11,"get_inner","","Returns a mutable reference to the underlying stream.",20],[11,"get_ref","","Returns a reference to the underlying stream.",20],[11,"get_mut","","Returns a mutable reference to the underlying stream.",20],[11,"get_compression","","Get the compression currently in use.  The result will be\neither None, indicating no compression is in use, or a string\nwith the compression name.",20],[11,"read","","",20],[11,"write_all","","",20],[11,"flush","","",20],[11,"fmt","","",15],[11,"read","","",15],[11,"write_all","","",15],[11,"flush","","",15],[11,"get_ref","","Returns a reference to the underlying stream.",15],[11,"get_mut","","Returns a mutable reference to the underlying stream.",15],[0,"x509","openssl",""],[3,"X509StoreContext","openssl::x509",""],[3,"X509Generator","","Generator of private key/certificate pairs"],[3,"X509","","A public key certificate"],[3,"X509Name","",""],[4,"X509FileType","",""],[13,"PEM","","",21],[13,"ASN1","","",21],[13,"Default","","",21],[4,"KeyUsage","",""],[13,"DigitalSignature","","",22],[13,"NonRepudiation","","",22],[13,"KeyEncipherment","","",22],[13,"DataEncipherment","","",22],[13,"KeyAgreement","","",22],[13,"KeyCertSign","","",22],[13,"CRLSign","","",22],[13,"EncipherOnly","","",22],[13,"DecipherOnly","","",22],[4,"ExtKeyUsage","",""],[13,"ServerAuth","","",23],[13,"ClientAuth","","",23],[13,"CodeSigning","","",23],[13,"EmailProtection","","",23],[13,"TimeStamping","","",23],[13,"MsCodeInd","","",23],[13,"MsCodeCom","","",23],[13,"MsCtlSign","","",23],[13,"MsSgc","","",23],[13,"MsEfs","","",23],[13,"NsSgc","","",23],[4,"X509ValidationError","",""],[13,"X509UnableToGetIssuerCert","","",24],[13,"X509UnableToGetCrl","","",24],[13,"X509UnableToDecryptCertSignature","","",24],[13,"X509UnableToDecryptCrlSignature","","",24],[13,"X509UnableToDecodeIssuerPublicKey","","",24],[13,"X509CertSignatureFailure","","",24],[13,"X509CrlSignatureFailure","","",24],[13,"X509CertNotYetValid","","",24],[13,"X509CertHasExpired","","",24],[13,"X509CrlNotYetValid","","",24],[13,"X509CrlHasExpired","","",24],[13,"X509ErrorInCertNotBeforeField","","",24],[13,"X509ErrorInCertNotAfterField","","",24],[13,"X509ErrorInCrlLastUpdateField","","",24],[13,"X509ErrorInCrlNextUpdateField","","",24],[13,"X509OutOfMem","","",24],[13,"X509DepthZeroSelfSignedCert","","",24],[13,"X509SelfSignedCertInChain","","",24],[13,"X509UnableToGetIssuerCertLocally","","",24],[13,"X509UnableToVerifyLeafSignature","","",24],[13,"X509CertChainTooLong","","",24],[13,"X509CertRevoked","","",24],[13,"X509InvalidCA","","",24],[13,"X509PathLengthExceeded","","",24],[13,"X509InvalidPurpose","","",24],[13,"X509CertUntrusted","","",24],[13,"X509CertRejected","","",24],[13,"X509SubjectIssuerMismatch","","",24],[13,"X509AkidSkidMismatch","","",24],[13,"X509AkidIssuerSerialMismatch","","",24],[13,"X509KeyusageNoCertsign","","",24],[13,"X509UnableToGetCrlIssuer","","",24],[13,"X509UnhandledCriticalExtension","","",24],[13,"X509KeyusageNoCrlSign","","",24],[13,"X509UnhandledCriticalCrlExtension","","",24],[13,"X509InvalidNonCA","","",24],[13,"X509ProxyPathLengthExceeded","","",24],[13,"X509KeyusageNoDigitalSignature","","",24],[13,"X509ProxyCertificatesNotAllowed","","",24],[13,"X509InvalidExtension","","",24],[13,"X509InavlidPolicyExtension","","",24],[13,"X509NoExplicitPolicy","","",24],[13,"X509DifferentCrlScope","","",24],[13,"X509UnsupportedExtensionFeature","","",24],[13,"X509UnnestedResource","","",24],[13,"X509PermittedVolation","","",24],[13,"X509ExcludedViolation","","",24],[13,"X509SubtreeMinmax","","",24],[13,"X509UnsupportedConstraintType","","",24],[13,"X509UnsupportedConstraintSyntax","","",24],[13,"X509UnsupportedNameSyntax","","",24],[13,"X509CrlPathValidationError","","",24],[13,"X509ApplicationVerification","","",24],[13,"X509UnknownError","","",24],[11,"new","","",25],[11,"get_error","","",25],[11,"get_current_cert","","",25],[11,"clone","","",22],[11,"clone","","",23],[11,"new","","Creates a new generator with the following defaults:",26],[11,"set_bitlength","","Sets desired bit length",26],[11,"set_valid_period","","Sets certificate validity period in days since today",26],[11,"set_CN","","Sets Common Name of certificate",26],[11,"set_usage","","Sets what for certificate could be used",26],[11,"set_ext_usage","","Sets allowed extended usage of certificate",26],[11,"set_sign_hash","","",26],[11,"generate","","Generates a private key and a signed certificate and returns them",26],[11,"new","","Creates new from handle with desired ownership.",27],[11,"new_in_ctx","","Creates a new certificate from context. Doesn't take ownership\nof handle.",27],[11,"from_pem","","Reads certificate from PEM, takes ownership of handle",27],[11,"subject_name","","",27],[11,"fingerprint","","Returns certificate fingerprint calculated using provided hash",27],[11,"write_pem","","Writes certificate as PEM",27],[11,"drop","","",27]],"paths":[[3,"Asn1Time"],[4,"RNGProperty"],[3,"BigNum"],[3,"MemBio"],[4,"Type"],[3,"Hasher"],[3,"HMAC"],[4,"Role"],[4,"EncryptionPadding"],[3,"PKey"],[4,"Mode"],[4,"Type"],[3,"Crypter"],[4,"SslMethod"],[4,"SslVerifyMode"],[4,"MaybeSslStream"],[4,"SslError"],[4,"OpensslError"],[3,"SslContext"],[3,"Ssl"],[3,"SslStream"],[4,"X509FileType"],[4,"KeyUsage"],[4,"ExtKeyUsage"],[4,"X509ValidationError"],[3,"X509StoreContext"],[3,"X509Generator"],[3,"X509"]]};
searchIndex['openssl-sys'] = {"items":[[0,"","openssl-sys",""],[3,"EVP_MD_CTX","",""],[3,"HMAC_CTX","",""],[3,"X509V3_CTX","",""],[3,"BIGNUM","",""],[12,"d","","",0],[12,"top","","",0],[12,"dmax","","",0],[12,"neg","","",0],[12,"flags","","",0],[5,"init","",""],[5,"BIO_eof","",""],[5,"ASN1_INTEGER_set","",""],[5,"ASN1_STRING_type_new","",""],[5,"ASN1_TIME_free","",""],[5,"BIO_ctrl","",""],[5,"BIO_free_all","",""],[5,"BIO_new","",""],[5,"BIO_read","",""],[5,"BIO_write","",""],[5,"BIO_s_mem","",""],[5,"BN_new","",""],[5,"BN_dup","",""],[5,"BN_clear_free","",""],[5,"BN_CTX_new","",""],[5,"BN_CTX_free","",""],[5,"BN_num_bits","",""],[5,"BN_set_negative","",""],[5,"BN_set_word","",""],[5,"BN_add","",""],[5,"BN_div","",""],[5,"BN_exp","",""],[5,"BN_gcd","",""],[5,"BN_mod_add","",""],[5,"BN_mod_exp","",""],[5,"BN_mod_inverse","",""],[5,"BN_mod_mul","",""],[5,"BN_mod_sqr","",""],[5,"BN_mod_sub","",""],[5,"BN_mul","",""],[5,"BN_nnmod","",""],[5,"BN_add_word","",""],[5,"BN_sub_word","",""],[5,"BN_mul_word","",""],[5,"BN_div_word","",""],[5,"BN_mod_word","",""],[5,"BN_sqr","",""],[5,"BN_sub","",""],[5,"BN_clear_bit","",""],[5,"BN_is_bit_set","",""],[5,"BN_lshift","",""],[5,"BN_lshift1","",""],[5,"BN_mask_bits","",""],[5,"BN_rshift","",""],[5,"BN_set_bit","",""],[5,"BN_rshift1","",""],[5,"BN_cmp","",""],[5,"BN_ucmp","",""],[5,"BN_generate_prime_ex","",""],[5,"BN_is_prime_ex","",""],[5,"BN_is_prime_fasttest_ex","",""],[5,"BN_rand","",""],[5,"BN_pseudo_rand","",""],[5,"BN_rand_range","",""],[5,"BN_pseudo_rand_range","",""],[5,"BN_bin2bn","",""],[5,"BN_bn2bin","",""],[5,"BN_dec2bn","",""],[5,"BN_bn2dec","",""],[5,"BN_hex2bn","",""],[5,"BN_bn2hex","",""],[5,"CRYPTO_num_locks","",""],[5,"CRYPTO_set_locking_callback","",""],[5,"CRYPTO_free","",""],[5,"CRYPTO_memcmp","",""],[5,"ERR_get_error","",""],[5,"ERR_lib_error_string","",""],[5,"ERR_func_error_string","",""],[5,"ERR_reason_error_string","",""],[5,"ERR_load_crypto_strings","",""],[5,"EVP_md5","",""],[5,"EVP_ripemd160","",""],[5,"EVP_sha1","",""],[5,"EVP_sha224","",""],[5,"EVP_sha256","",""],[5,"EVP_sha384","",""],[5,"EVP_sha512","",""],[5,"EVP_aes_128_cbc","",""],[5,"EVP_aes_128_ecb","",""],[5,"EVP_aes_128_xts","",""],[5,"EVP_aes_256_cbc","",""],[5,"EVP_aes_256_ecb","",""],[5,"EVP_aes_256_xts","",""],[5,"EVP_rc4","",""],[5,"EVP_CIPHER_CTX_new","",""],[5,"EVP_CIPHER_CTX_set_padding","",""],[5,"EVP_CIPHER_CTX_free","",""],[5,"EVP_CipherInit","",""],[5,"EVP_CipherUpdate","",""],[5,"EVP_CipherFinal","",""],[5,"EVP_DigestInit","",""],[5,"EVP_DigestInit_ex","",""],[5,"EVP_DigestUpdate","",""],[5,"EVP_DigestFinal","",""],[5,"EVP_DigestFinal_ex","",""],[5,"EVP_MD_CTX_create","",""],[5,"EVP_MD_CTX_copy_ex","",""],[5,"EVP_MD_CTX_destroy","",""],[5,"EVP_PKEY_new","",""],[5,"EVP_PKEY_free","",""],[5,"EVP_PKEY_assign","",""],[5,"EVP_PKEY_get1_RSA","",""],[5,"EVP_PKEY_set1_RSA","",""],[5,"HMAC_CTX_init","",""],[5,"HMAC_CTX_cleanup","",""],[5,"HMAC_CTX_copy","",""],[5,"HMAC_Init_ex_shim","",""],[5,"HMAC_Final_shim","",""],[5,"HMAC_Update_shim","",""],[5,"PEM_read_bio_X509","",""],[5,"PEM_write_bio_PrivateKey","",""],[5,"PEM_write_bio_X509","",""],[5,"PKCS5_PBKDF2_HMAC_SHA1","",""],[5,"RAND_bytes","",""],[5,"RSA_generate_key","",""],[5,"RSA_private_decrypt","",""],[5,"RSA_public_encrypt","",""],[5,"RSA_sign","",""],[5,"RSA_size","",""],[5,"RSA_verify","",""],[5,"SSL_library_init","",""],[5,"SSL_load_error_strings","",""],[5,"SSLv3_method","",""],[5,"TLSv1_method","",""],[5,"TLSv1_1_method","",""],[5,"TLSv1_2_method","",""],[5,"SSLv23_method","",""],[5,"SSL_new","",""],[5,"SSL_free","",""],[5,"SSL_set_bio","",""],[5,"SSL_get_rbio","",""],[5,"SSL_get_wbio","",""],[5,"SSL_accept","",""],[5,"SSL_connect","",""],[5,"SSL_ctrl","",""],[5,"SSL_get_error","",""],[5,"SSL_read","",""],[5,"SSL_write","",""],[5,"SSL_get_ex_data_X509_STORE_CTX_idx","",""],[5,"SSL_get_SSL_CTX","",""],[5,"SSL_get_current_compression","",""],[5,"SSL_get_peer_certificate","",""],[5,"SSL_COMP_get_name","",""],[5,"SSL_CTX_new","",""],[5,"SSL_CTX_free","",""],[5,"SSL_CTX_set_verify","",""],[5,"SSL_CTX_set_verify_depth","",""],[5,"SSL_CTX_load_verify_locations","",""],[5,"SSL_CTX_get_ex_new_index","",""],[5,"SSL_CTX_set_ex_data","",""],[5,"SSL_CTX_get_ex_data","",""],[5,"SSL_CTX_use_certificate_file","",""],[5,"SSL_CTX_use_PrivateKey_file","",""],[5,"SSL_CTX_set_cipher_list","",""],[5,"X509_add_ext","",""],[5,"X509_digest","",""],[5,"X509_free","",""],[5,"X509_get_serialNumber","",""],[5,"X509_get_subject_name","",""],[5,"X509_gmtime_adj","",""],[5,"X509_new","",""],[5,"X509_set_issuer_name","",""],[5,"X509_set_notAfter","",""],[5,"X509_set_notBefore","",""],[5,"X509_set_version","",""],[5,"X509_set_pubkey","",""],[5,"X509_sign","",""],[5,"X509_EXTENSION_free","",""],[5,"X509_NAME_add_entry_by_txt","",""],[5,"X509_NAME_get_index_by_NID","",""],[5,"X509_NAME_get_entry","",""],[5,"X509_NAME_ENTRY_get_data","",""],[5,"ASN1_STRING_to_UTF8","",""],[5,"X509_STORE_CTX_get_current_cert","",""],[5,"X509_STORE_CTX_get_error","",""],[5,"X509_STORE_CTX_get_ex_data","",""],[5,"X509V3_EXT_conf_nid","",""],[5,"X509V3_set_ctx","",""],[5,"i2d_RSA_PUBKEY","",""],[5,"d2i_RSA_PUBKEY","",""],[5,"i2d_RSAPrivateKey","",""],[5,"d2i_RSAPrivateKey","",""],[0,"probe","",""],[3,"ProbeResult","openssl-sys::probe",""],[12,"cert_file","","",1],[12,"cert_dir","","",1],[5,"find_certs_dirs","","Probe the system for the directory in which CA certificates should likely be\nfound."],[5,"init_ssl_cert_env_vars","",""],[5,"probe","",""],[6,"ASN1_INTEGER","openssl-sys",""],[6,"ASN1_STRING","",""],[6,"ASN1_TIME","",""],[6,"BIO","",""],[6,"BIO_METHOD","",""],[6,"BN_CTX","",""],[6,"COMP_METHOD","",""],[6,"CRYPTO_EX_DATA","",""],[6,"ENGINE","",""],[6,"EVP_CIPHER","",""],[6,"EVP_CIPHER_CTX","",""],[6,"EVP_MD","",""],[6,"EVP_PKEY","",""],[6,"EVP_PKEY_CTX","",""],[6,"RSA","",""],[6,"SSL","",""],[6,"SSL_CTX","",""],[6,"SSL_METHOD","",""],[6,"X509","",""],[6,"X509_CRL","",""],[6,"X509_EXTENSION","",""],[6,"X509_NAME","",""],[6,"X509_NAME_ENTRY","",""],[6,"X509_REQ","",""],[6,"X509_STORE_CTX","",""],[6,"CRYPTO_EX_new","",""],[6,"CRYPTO_EX_dup","",""],[6,"CRYPTO_EX_free","",""],[6,"PasswordCallback","",""],[17,"BIO_CTRL_EOF","",""],[17,"CRYPTO_LOCK","",""],[17,"MBSTRING_ASC","",""],[17,"MBSTRING_BMP","",""],[17,"MBSTRING_FLAG","",""],[17,"MBSTRING_UNIV","",""],[17,"MBSTRING_UTF8","",""],[17,"NID_ext_key_usage","",""],[17,"NID_key_usage","",""],[17,"SSL_CTRL_SET_TLSEXT_HOSTNAME","",""],[17,"SSL_ERROR_NONE","",""],[17,"SSL_ERROR_SSL","",""],[17,"SSL_ERROR_SYSCALL","",""],[17,"SSL_ERROR_WANT_ACCEPT","",""],[17,"SSL_ERROR_WANT_CONNECT","",""],[17,"SSL_ERROR_WANT_READ","",""],[17,"SSL_ERROR_WANT_WRITE","",""],[17,"SSL_ERROR_WANT_X509_LOOKUP","",""],[17,"SSL_ERROR_ZERO_RETURN","",""],[17,"SSL_VERIFY_NONE","",""],[17,"SSL_VERIFY_PEER","",""],[17,"TLSEXT_NAMETYPE_host_name","",""],[17,"V_ASN1_GENERALIZEDTIME","",""],[17,"V_ASN1_UTCTIME","",""],[17,"X509_FILETYPE_ASN1","",""],[17,"X509_FILETYPE_DEFAULT","",""],[17,"X509_FILETYPE_PEM","",""],[17,"X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH","",""],[17,"X509_V_ERR_AKID_SKID_MISMATCH","",""],[17,"X509_V_ERR_APPLICATION_VERIFICATION","",""],[17,"X509_V_ERR_CERT_CHAIN_TOO_LONG","",""],[17,"X509_V_ERR_CERT_HAS_EXPIRED","",""],[17,"X509_V_ERR_CERT_NOT_YET_VALID","",""],[17,"X509_V_ERR_CERT_REJECTED","",""],[17,"X509_V_ERR_CERT_REVOKED","",""],[17,"X509_V_ERR_CERT_SIGNATURE_FAILURE","",""],[17,"X509_V_ERR_CERT_UNTRUSTED","",""],[17,"X509_V_ERR_CRL_HAS_EXPIRED","",""],[17,"X509_V_ERR_CRL_NOT_YET_VALID","",""],[17,"X509_V_ERR_CRL_PATH_VALIDATION_ERROR","",""],[17,"X509_V_ERR_CRL_SIGNATURE_FAILURE","",""],[17,"X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT","",""],[17,"X509_V_ERR_DIFFERENT_CRL_SCOPE","",""],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD","",""],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD","",""],[17,"X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD","",""],[17,"X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD","",""],[17,"X509_V_ERR_EXCLUDED_VIOLATION","",""],[17,"X509_V_ERR_INVALID_CA","",""],[17,"X509_V_ERR_INVALID_EXTENSION","",""],[17,"X509_V_ERR_INVALID_NON_CA","",""],[17,"X509_V_ERR_INVALID_POLICY_EXTENSION","",""],[17,"X509_V_ERR_INVALID_PURPOSE","",""],[17,"X509_V_ERR_KEYUSAGE_NO_CERTSIGN","",""],[17,"X509_V_ERR_KEYUSAGE_NO_CRL_SIGN","",""],[17,"X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE","",""],[17,"X509_V_ERR_NO_EXPLICIT_POLICY","",""],[17,"X509_V_ERR_OUT_OF_MEM","",""],[17,"X509_V_ERR_PATH_LENGTH_EXCEEDED","",""],[17,"X509_V_ERR_PERMITTED_VIOLATION","",""],[17,"X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED","",""],[17,"X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED","",""],[17,"X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN","",""],[17,"X509_V_ERR_SUBJECT_ISSUER_MISMATCH","",""],[17,"X509_V_ERR_SUBTREE_MINMAX","",""],[17,"X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY","",""],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE","",""],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE","",""],[17,"X509_V_ERR_UNABLE_TO_GET_CRL","",""],[17,"X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER","",""],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT","",""],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY","",""],[17,"X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE","",""],[17,"X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION","",""],[17,"X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION","",""],[17,"X509_V_ERR_UNNESTED_RESOURCE","",""],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX","",""],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE","",""],[17,"X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE","",""],[17,"X509_V_ERR_UNSUPPORTED_NAME_SYNTAX","",""],[17,"X509_V_OK","",""]],"paths":[[3,"BIGNUM"],[3,"ProbeResult"]]};

initSearch(searchIndex);
